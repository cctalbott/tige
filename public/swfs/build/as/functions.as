//--------------<functions>--------------\\//thumb menufunction onThumbClick(event:MouseEvent):void {	try 	{		if(_interiorBtnActive == true) 		{			removeChild(interiorView);			_interiorBtnActive = false;		}	} 	catch(e:ArgumentError) 	{			}		function thumbSwitcher(_switchView:String):void 	{		unloadViews();				if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 		{			if(_vescheme == "flex") 			{				swapViews(MovieClip(parent.parent).loadView, ""+theModelView+""+_switchView+".swf");			} 			else 			{				swapViews(MovieClip(parent.parent).loadView, ""+theModelView+""+_switchView+"2.swf");			}		} 		else 		{			swapViews(MovieClip(parent.parent).loadView, ""+theModelView+""+_switchView+".swf");		}				MovieClip(parent.parent).loadView.addEventListener(Event.ADDED, loadedEvent);	}		switch(event.target) 	{ 		case pathfront3quarterBtnMC:			thumbSwitcher("front3quarter");			break;		case pathrear3quarterBtnMC:			thumbSwitcher("rear3quarter");			break;		case pathprofileBtnMC:			thumbSwitcher("profile3quarter");			break;		case pathz1Front3quarterBtnMC:			thumbSwitcher("front3quarter");			break;		case pathz1Rear3quarterBtnMC:			thumbSwitcher("rear3quarter");			break;		case pathz1ProfileBtnMC:			thumbSwitcher("profile3quarter");			unloadViews();			break;		case pathvethumbFront3quarterBtnMC:			thumbSwitcher("front3quarter");			unloadViews();			break;		case pathvethumbRear3quarterBtnMC:			thumbSwitcher("rear3quarter");			unloadViews();			break;		case pathvethumbProfileBtnMC:			thumbSwitcher("profile3quarter");			unloadViews();			break;		/*case pathinteriorBtnMC:			unloadViews();			trace("interior");			break;*/	}	}function unloadViews():void {	MovieClip(parent.parent).loadView.unload();}function loadedEvent(event:Event):void {	initializeOptions();}function swapViews(theView:Loader, theUrl:String):void {	MovieClip(parent.parent).LoadFunctionView(theUrl, theView);}function onThumbOver(event:MouseEvent):void {	event.target.scaleX = 1.10;	event.target.scaleY = 1.10;}function onThumbOut(event:MouseEvent):void {	event.target.scaleX = 1;	event.target.scaleY = 1;}//veColorSchemefunction onColorSchemeMenuOver(event:MouseEvent):void {	if(event.target.name == "flexBtnMC" || event.target.name == "classicBtnMC") 	{		event.target.textLabel.textColor = overColor;	} 	else 	{		event.target.parent.textLabel.textColor = overColor;	}}function onColorSchemeMenuOut(event:MouseEvent):void {	if(event.target.name == "flexBtnMC" || event.target.name == "classicBtnMC") 	{		event.target.textLabel.textColor = outColorWhite;	} 	else 	{		event.target.parent.textLabel.textColor = outColorWhite;	}}function onColorSchemeMenuClick(event:MouseEvent):void {	try 	{		if(_interiorBtnActive == true) 		{			removeChild(interiorView);			_interiorBtnActive = false;		}	} 	catch(e:ArgumentError) 	{			}		switch(event.target.textLabel.text) 	{		case "FLEX":			_vescheme = "flex";			break;		case "CLASSIC":			_vescheme = "classic";			break;	}		if(_vescheme == "flex") 	{		swapViews(MovieClip(parent.parent).loadView, ""+theModelView+"front3quarter.swf");		MovieClip(parent.parent).loadView.addEventListener(Event.ADDED, loadedEvent);		pathsummaryMC.deckAccentColorTxt.text = _colorNames[_deckAccentColor];		pathflexBtnMC.colorSchemeSelectIconMC.visible = true;		pathclassicBtnMC.colorSchemeSelectIconMC.visible = false;	} 	else 	{		swapViews(MovieClip(parent.parent).loadView, ""+theModelView+"front3quarter2.swf");		MovieClip(parent.parent).loadView.addEventListener(Event.ADDED, loadedEvent);		pathsummaryMC.deckAccentColorTxt.text = "N/A";		pathflexBtnMC.colorSchemeSelectIconMC.visible = false;		pathclassicBtnMC.colorSchemeSelectIconMC.visible = true;	}		if(_section == "s2") 	{		_section = "s1";		sectionSwitch();	}}//sect menufunction onSectOver(event:MouseEvent):void {	if(event.target.activated != false) 	{		event.target.textLabel.textColor = overColor;				if(event.target.textDesc != null) 		{			event.target.textDesc.textColor = overColor;		}	}}function onSectOut(event:MouseEvent):void {	if(event.target.activated != false) 	{		event.target.textLabel.textColor = overColor;	}}function onSectOut2(event:MouseEvent):void {	if(event.target.activated != false) 	{		event.target.textLabel.textColor = outColorWhite;				if(event.target.textDesc != null) 		{			event.target.textDesc.textColor = outColorWhite;		}	}}function onSectClick(event:MouseEvent):void {	switch(event.target) 	{		case pathextSectBtnMC:			_section = "s1";			sectionSwitch();			break;		case pathgraphicSectBtnMC:			_section = "s8";			sectionSwitch();			break;		case pathintSectBtnMC:			_section = "s9";			sectionSwitch();			break;	}}//next btnfunction onNextOver(event:MouseEvent):void {	colorSwitch(pathnextBtnMC.btnBgMC, 0x666666);	pathnextBtnMC.textLabel1.textColor = outColorWhite;}function onNextOut(event:MouseEvent):void {	colorSwitch(pathnextBtnMC.btnBgMC, 0xE0E0E0);	pathnextBtnMC.textLabel1.textColor = 0x141414;}function onNextClick(event:MouseEvent):void {	var regExpPattern:RegExp = /\d{1,2}/;	var sectionNum:Number;		if(_section == "sTower")	{	  _section = "s8";  }  else  {    sectionNum = regExpPattern.exec(_section);		  if(sectionNum < _totalSections)   	{  		switch(_model)   		{  		  case "RZ4":  		    if(_section == "s7")          {            _section = "sTower";          }          else          {            _section = "s" + (sectionNum + 1);          }  		    break;  		  case "RZ2":  		    if(_section == "s7")          {            _section = "sTower";          }          else          {            _section = "s" + (sectionNum + 1);          }  		    break;  		  case "RZR":  		    if(_section == "s5")  		    {  		      _section = "sMainPanelAccent";  		    }  		    else if(_section == "sMainPanelAccent")  		    {  		      _section = "s6";  		    }  		    else if(_section == "s6")  		    {  		      _section = "sSecondPanelAccent";  		    }  		    else if(_section == "sSecondPanelAccent")  		    {  		      _section = "s7";  		    }  		    else if(_section == "s7")  		    {  		      _section = "sTower"  		    }  		    else  		    {  		      _section = "s" + (sectionNum + 1);  		    }  		    break;  		  case "R20":  		    if(_section == "s2")  		    {  		      _section = "s4";  		    }  		    else if(_section == "s5")  		    {  		      _section = "sMainPanelAccent";  		    }  		    else if(_section == "sMainPanelAccent")  		    {  		      _section = "s7";  		    }  		    else  		    {  		      _section = "s" + (sectionNum + 1);  		    }  		    break;  			case "Z1":  				if(_section == "s5")   				{   					_section = "sTransomAccent";  				}  				else if(_section == "sTransomAccent")  				{  				  _section = "s7";  				}   				else if(_section == "s7")          {            _section = "sTower";          }  				else   				{  					_section = "s" + (sectionNum + 1);  				}  				break;  			case "24Vé":  				if(_vescheme == "classic")   				{  					if(_section == "s1")   					{  						_section = "s4";  					}  					else if(_section == "s7")            {              _section = "sTower";            }   					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}   				else   				{  					if(_section == "s2")   					{  						_section = "s4";  					}   					else if(_section == "s7")            {              _section = "sTower";            }  					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}  				break;  			case "22Vé":  				if(_vescheme == "classic")   				{  					if(_section == "s1")   					{  						_section = "s4";  					}   					else if(_section == "s7")            {              _section = "sTower";            }  					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}   				else   				{  					if(_section == "s2")   					{  						_section = "s4";  					}   					else if(_section == "s7")            {              _section = "sTower";            }  					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}  				break;  			case "22i":  				if(_vescheme == "classic")   				{  					if(_section == "s1")   					{  						_section = "s4";  					}   					else if(_section == "s7")            {              _section = "sTower";            }  					else if(_section == "s11" || _section == "s12")   					{  						_section = "s13";  					}  					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}   				else   				{  					if(_section == "s2")   					{  						_section = "s4";  					}   					else if(_section == "s7")            {              _section = "sTower";            }  					else if(_section == "s11" || _section == "s12")   					{  						_section = "s13";  					}   					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}  				break;  			case "20V":  				if(_vescheme == "classic")   				{  					if(_section == "s1")   					{  						_section = "s4";  					}   					else if(_section == "s11" || _section == "s12")   					{  						_section = "s13";  					}   					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}   				else   				{  					if(_section == "s2")   					{  						_section = "s4";  					}   					else if(_section == "s11" || _section == "s12")   					{  						_section = "s13";  					}   					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}  				break;  			case "20i":  				if(_vescheme == "classic")   				{  					if(_section == "s1")   					{  						_section = "s4";  					}   					else if(_section == "s11")   					{  						_section = "s13";  					}   					else if(_section == "s12")   					{  						_section = "s13";  					}   					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}   				else   				{  					if(_section == "s2")   					{  						_section = "s4";  					}   					else if(_section == "s11")   					{  						_section = "s13";  					}   					else if(_section == "s12")   					{  						_section = "s13";  					}   					else   					{  						_section = "s" + (sectionNum + 1);  					}  				}  				break;  			default:  				_section = "s" + (sectionNum + 1);  				break;  		}  	}  }	sectionSwitch();}//print btnfunction onPrintOver(event:MouseEvent):void {	colorSwitch(pathprintBtnMC.btnBgMC, 0x666666);	pathprintBtnMC.textLabel.textColor = outColorWhite;}function onPrintOut(event:MouseEvent):void {	colorSwitch(pathprintBtnMC.btnBgMC, 0xE0E0E0);	pathprintBtnMC.textLabel.textColor = 0x141414;}function onPrintClick(event:MouseEvent):void {	var printIt:PrintBuildClass = new PrintBuildClass();	addChild(printIt);}//contactbtn/*function onContactClick(event:MouseEvent):void {	var contactDealer:ContactBuildClass = new ContactBuildClass();	addChild(contactDealer);}*///color menufunction onGraphicClick(event:MouseEvent):void {	switch(event.target) {		case pathfreerideGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;			pathaftFreerideAcctColMenuMC.visible = true;			pathbowFreerideAcctColMenuMC.visible = true;			pathrzAftVectorBlackColMenuMC.visible = false;      pathrzAftVectorColMenuMC.visible = false;      pathrzBowVectorColMenuMC.visible = false;			_rzGraphicName = "freeride";			pathfreerideGraphicBtnMC.textLabel.textColor = overColor;			pathpureGraphicBtnMC.textLabel.textColor = outColorWhite;			pathrzVectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathfreerideGraphicBtnMC.activated = false;			pathpureGraphicBtnMC.activated = true;			pathrzVectorGraphicBtnMC.activated = true;			break;		case pathrzVectorGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = true;			pathaftFreerideAcctColMenuMC.visible = false;			pathbowFreerideAcctColMenuMC.visible = false;			pathrzAftVectorBlackColMenuMC.visible = true;      pathrzAftVectorColMenuMC.visible = true;      pathrzBowVectorColMenuMC.visible = true;			_rzGraphicName = "vector";			pathfreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathpureGraphicBtnMC.textLabel.textColor = outColorWhite;			pathrzVectorGraphicBtnMC.textLabel.textColor = overColor;			pathfreerideGraphicBtnMC.activated = true;			pathpureGraphicBtnMC.activated = true;			pathrzVectorGraphicBtnMC.activated = false;			break;		case pathpureGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;			pathaftFreerideAcctColMenuMC.visible = false;			pathbowFreerideAcctColMenuMC.visible = false;			pathrzAftVectorBlackColMenuMC.visible = false;      pathrzAftVectorColMenuMC.visible = false;      pathrzBowVectorColMenuMC.visible = false;			_rzGraphicName = "pure";			pathfreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathpureGraphicBtnMC.textLabel.textColor = overColor;			pathrzVectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathfreerideGraphicBtnMC.activated = true;			pathpureGraphicBtnMC.activated = false;			pathrzVectorGraphicBtnMC.activated = true;			break;		case pathrzrFreerideGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			pathrzrAftFreerideAcctColMenuMC.visible = true;			pathrzrBowFreerideAcctColMenuMC.visible = true;			pathaftVectorBlackColMenuMC.visible = false;      pathaftVectorColMenuMC.visible = false;      pathbowVectorColMenuMC.visible = false;			_rzGraphicName = "freeride";			pathrzrFreerideGraphicBtnMC.textLabel.textColor = overColor;			pathvectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathrzrFreerideGraphicBtnMC.activated = false;			pathvectorGraphicBtnMC.activated = true;			break;		case pathvectorGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			pathrzrAftFreerideAcctColMenuMC.visible = false;			pathrzrBowFreerideAcctColMenuMC.visible = false;			pathaftVectorBlackColMenuMC.visible = true;      pathaftVectorColMenuMC.visible = true;      pathbowVectorColMenuMC.visible = true;			_rzGraphicName = "vector";			pathrzrFreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathvectorGraphicBtnMC.textLabel.textColor = overColor;			pathrzrFreerideGraphicBtnMC.activated = true;			pathvectorGraphicBtnMC.activated = false;			break;		case pathz1FreerideGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;			pathaftZ1FreerideAcctColMenuMC.visible = true;			pathbowZ1FreerideAcctColMenuMC.visible = true;			pathz1AftVectorBlackColMenuMC.visible = false;      pathz1AftVectorColMenuMC.visible = false;      pathz1BowVectorColMenuMC.visible = false;			pathstreamlineColMenuMC.visible = false;			_z1GraphicName = "freeride";			pathz1FreerideGraphicBtnMC.textLabel.textColor = overColor;			pathstreamlineGraphicBtnMC.textLabel.textColor = outColorWhite;			pathz1VectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathz1FreerideGraphicBtnMC.activated = false;			pathstreamlineGraphicBtnMC.activated = true;			pathz1VectorGraphicBtnMC.activated = true;			break;		case pathz1VectorGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = true;			pathaftZ1FreerideAcctColMenuMC.visible = false;			pathbowZ1FreerideAcctColMenuMC.visible = false;			pathz1AftVectorBlackColMenuMC.visible = true;      pathz1AftVectorColMenuMC.visible = true;      pathz1BowVectorColMenuMC.visible = true;      pathstreamlineColMenuMC.visible = false;			_z1GraphicName = "vector";			pathz1FreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathstreamlineGraphicBtnMC.textLabel.textColor = outColorWhite;			pathz1VectorGraphicBtnMC.textLabel.textColor = overColor;			pathz1FreerideGraphicBtnMC.activated = true;			pathstreamlineGraphicBtnMC.activated = true;			pathz1VectorGraphicBtnMC.activated = false;			break;		case pathstreamlineGraphicBtnMC:			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;			pathaftZ1FreerideAcctColMenuMC.visible = false;			pathbowZ1FreerideAcctColMenuMC.visible = false;			pathz1AftVectorBlackColMenuMC.visible = false;      pathz1AftVectorColMenuMC.visible = false;      pathz1BowVectorColMenuMC.visible = false;			pathstreamlineColMenuMC.visible = true;			_z1GraphicName = "streamline";			pathz1FreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathstreamlineGraphicBtnMC.textLabel.textColor = overColor;			pathz1VectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathz1FreerideGraphicBtnMC.activated = true;			pathstreamlineGraphicBtnMC.activated = false;			pathz1VectorGraphicBtnMC.activated = true;			break;		case pathveFreerideBtnMC:			if(_model == "24Vé" || _model == "22Vé") {				_modelViewName.content.graphicMC.graphic1MC.visible = false;			}			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			_modelViewName.content.graphicMC.graphicFreerideMC.visible = true;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = true;			pathveFreerideColMenuMC.visible = true;			_veGraphicName = "freeride";			pathveFreerideBtnMC.textLabel.textColor = overColor;			pathectoBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;			pathveFreerideBtnMC.activated = false;			pathectoBtnMC.activated = true;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = true;			break;		case pathectoBtnMC:			pathectoBtnMC.textLabel.textColor = overColor;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;			pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			if(_model == "24Vé" || _model == "22Vé") {				_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;				_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;				pathveFreerideColMenuMC.visible = false;			}			_veGraphicName = "ecto";			pathectoBtnMC.activated = false;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = true;			pathveFreerideBtnMC.activated = true;			break;		case pathedgeBtnMC:			pathectoBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = overColor;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;			pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			if(_model == "24Vé" || _model == "22Vé") {				_modelViewName.content.graphicMC.graphic1MC.visible = false;			}			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = true;			if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") {				_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;				_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;				pathveFreerideColMenuMC.visible = false;			}			_veGraphicName = "edge";			pathectoBtnMC.activated = true;			pathedgeBtnMC.activated = false;			pathlimitedBtnMC.activated = true;			pathveFreerideBtnMC.activated = true;			break		case pathlimitedBtnMC:			pathectoBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = overColor;			pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			if(_model == "24Vé" || _model == "22Vé") {				_modelViewName.content.graphicMC.graphic1MC.visible = false;			}			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") {				_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;				_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;				pathveFreerideColMenuMC.visible = false;			}			_veGraphicName = "limited";			pathectoBtnMC.activated = true;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = false;			pathveFreerideBtnMC.activated = true;			break;	}}function onGraphicColorClick(event:MouseEvent):void {	switch(event.target.parent) {		case pathaftFreerideAcctColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic1MC.freerideBackMC, "_freerideAftColor");			pathaftFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideAftColor];			break;		case pathbowFreerideAcctColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic1MC.freerideFrontMC, "_freerideBowColor");			pathbowFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideBowColor];			break;		case pathrzAftVectorBlackColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicVectorMC.vectorRearBlackMC, "_vectorAftBlackColor");			pathrzAftVectorBlackColMenuMC.textDesc.text = _colorNames[_vectorAftBlackColor];			break;		case pathrzAftVectorColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicVectorMC.vectorRearColorMC, "_vectorAftColorColor");			pathrzAftVectorColMenuMC.textDesc.text = _colorNames[_vectorAftColorColor];			break;		case pathrzBowVectorColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicVectorMC.vectorFrontMC, "_vectorBowColor");			pathrzBowVectorColMenuMC.textDesc.text = _colorNames[_vectorBowColor];			break;		case pathrzrAftFreerideAcctColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic1MC.freerideBackMC, "_freerideAftColor");			pathrzrAftFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideAftColor];			break;		case pathrzrBowFreerideAcctColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic1MC.freerideFrontMC, "_freerideBowColor");			pathrzrBowFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideBowColor];			break;		case pathaftVectorBlackColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic2MC.vectorRearBlackMC, "_vectorAftBlackColor");			pathaftVectorBlackColMenuMC.textDesc.text = _colorNames[_vectorAftBlackColor];			break;		case pathaftVectorColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic2MC.vectorBackColorMC, "_vectorAftColorColor");			pathaftVectorColMenuMC.textDesc.text = _colorNames[_vectorAftColorColor];			break;		case pathbowVectorColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic2MC.vectorFrontMC, "_vectorBowColor");			pathbowVectorColMenuMC.textDesc.text = _colorNames[_vectorBowColor];			break;		case pathaftZ1FreerideAcctColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic1MC.freerideBackMC, "_freerideAftColor");			pathaftZ1FreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideAftColor];			break;		case pathbowZ1FreerideAcctColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic1MC.freerideFrontMC, "_z1FreerideBowColor");			pathbowZ1FreerideAcctColMenuMC.textDesc.text = _colorNames[_z1FreerideBowColor];			break;		case pathstreamlineColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphic2MC, "_streamlineColor");			pathstreamlineColMenuMC.textDesc.text = _colorNames[_streamlineColor];			break;		case pathz1AftVectorBlackColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicVectorMC.vectorRearBlackMC, "_vectorAftBlackColor");			pathz1AftVectorBlackColMenuMC.textDesc.text = _colorNames[_vectorAftBlackColor];			break;		case pathz1AftVectorColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicVectorMC.vectorRearColorMC, "_vectorAftColorColor");			pathz1AftVectorColMenuMC.textDesc.text = _colorNames[_vectorAftColorColor];			break;		case pathz1BowVectorColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicVectorMC.vectorFrontMC, "_vectorBowColor");			pathz1BowVectorColMenuMC.textDesc.text = _colorNames[_vectorBowColor];			break;		case pathveFreerideColMenuMC:			colorSwitchStatement(event.target.name, _modelViewName.content.graphicMC.graphicFreerideMC, "_veFreerideColor");			pathveFreerideColMenuMC.textDesc.text = _colorNames[_veFreerideColor];			break;	}}function onGraphicColorOver(event:MouseEvent):void {	event.target.height = 17;	event.target.width = 17;	//event.target.y = 4;}function onGraphicColorOut(event:MouseEvent):void {	event.target.height = 15;	event.target.width = 15;	//event.target.y = 9;}function onIntPkgColorClick(event:MouseEvent):void {	intPkgSwitchStatement(event.target.name);}function intPkgSwitchStatement(theVar:Object):void {	switch(theVar) {		case "platBtnMC":			_intPkgColor = "platinum";			break;		case "mushBtnMC":			_intPkgColor = "mushroom";			break;	}	if(_intPkgColor == "platinum") {		_modelViewName.content.intPkgMC.intPkgMushMC.visible = false;		try {			MovieClip(Loader(MovieClip(parent.parent).getChildByName("loadInterior")).content).intPkgMC.intPkgMushMC.visible = false;		} catch(e:TypeError) {			//nothing		}	} else {		_modelViewName.content.intPkgMC.intPkgMushMC.visible = true;		try {			MovieClip(Loader(MovieClip(parent.parent).getChildByName("loadInterior")).content).intPkgMC.intPkgMushMC.visible = true;		} catch(e:TypeError) {			//nothing		}	}	var baseInteriorTextField:TextField = TextField(Sprite(Sprite(Object(Sprite(SectionMenuClass(this.getChildByName("sectionMenu")).getChildByName("_interiorSections")).getChildByName("_baseInterior")).getChildAt(0)).getChildAt(0)).getChildAt(0));	baseInteriorTextField.replaceText(15, 50, _intPkgColor.toString());}function onAcctTxtrOptionClick(event:MouseEvent):void {	switch(event.target.name) {		case "brushedSilkBtnMC":			_accentTextureName = "brushed silk";			try {				_modelViewName.content.accentTextureMC.brushedMC.visible = true;				_modelViewName.content.accentTextureMC.nexusMC.visible = false;			} catch(e:TypeError) {				//nothing			}			try {				MovieClip(Loader(MovieClip(parent.parent).getChildByName("loadInterior")).content).accentTextureMC.brushedMC.visible = true;				MovieClip(Loader(MovieClip(parent.parent).getChildByName("loadInterior")).content).accentTextureMC.nexusMC.visible = false;			} catch(e:TypeError) {				//nothing			}			break;		case "nexusBtnMC":			_accentTextureName = "nexus";			try {				_modelViewName.content.accentTextureMC.brushedMC.visible = false;				_modelViewName.content.accentTextureMC.nexusMC.visible = true;			} catch(e:TypeError) {				//nothing			}			try {				MovieClip(Loader(MovieClip(parent.parent).getChildByName("loadInterior")).content).accentTextureMC.brushedMC.visible = false;				MovieClip(Loader(MovieClip(parent.parent).getChildByName("loadInterior")).content).accentTextureMC.nexusMC.visible = true;			} catch(e:TypeError) {				//nothing			}			break;	}	if(_model == "22i" || _model == "20V" || _model == "20i") {		try {			Object(Sprite(ColorMenuClass(accentTextureColorMenu).getChildAt(0)).getChildAt(0)).resetBtns();		} catch(e:RangeError) {			//do nothing		}	}	var accentTextureTextField:TextField = TextField(Sprite(Sprite(Object(Sprite(SectionMenuClass(this.getChildByName("sectionMenu")).getChildByName("_interiorSections")).getChildByName("_accentTexture")).getChildAt(0)).getChildAt(0)).getChildAt(0));	accentTextureTextField.replaceText(14, 50, _accentTextureName.toString());	_accentTextureColor = "none";}function colorSwitchStatement(theVar:Object, thePanel:MovieClip, panelVarName:Object):void {	switch(theVar) 	{		case "color1BtnMC":			panelVarIfElse("c1");			colorSwitch(thePanel, _hex.c1);			break;		case "color2BtnMC":			panelVarIfElse("c2");			colorSwitch(thePanel, _hex.c2);			break;		case "color3BtnMC":			panelVarIfElse("c3");			colorSwitch(thePanel, _hex.c3);			break;		case "color4BtnMC":			panelVarIfElse("c4");			colorSwitch(thePanel, _hex.c4);			break;		case "color5BtnMC":			panelVarIfElse("c5");			colorSwitch(thePanel, _hex.c5);			break;		case "color6BtnMC":			panelVarIfElse("c6");			colorSwitch(thePanel, _hex.c6);			break;		case "color7BtnMC":			panelVarIfElse("c7");			colorSwitch(thePanel, _hex.c7);			break;		case "color8BtnMC":			panelVarIfElse("c8");			colorSwitch(thePanel, _hex.c8);			break;		case "color9BtnMC":			panelVarIfElse("c9");			colorSwitch(thePanel, _hex.c9);			break;		case "color10BtnMC":			panelVarIfElse("c10");			colorSwitch(thePanel, _hex.c10);			break;		case "color11BtnMC":			panelVarIfElse("c11");			colorSwitch(thePanel, _hex.c11);			break;		case "color12BtnMC":			panelVarIfElse("c12");			colorSwitch(thePanel, _hex.c12);			break;		case "color13BtnMC":			panelVarIfElse("c13");			colorSwitch(thePanel, _hex.c13);			break;		case "color14BtnMC":			panelVarIfElse("c14");			colorSwitch(thePanel, _hex.c14);			break;		case "color15BtnMC":			panelVarIfElse("c15");			colorSwitch(thePanel, _hex.c15);			break;		case "color16BtnMC":			panelVarIfElse("c16");			colorSwitch(thePanel, _hex.c16);			break;		case "color17BtnMC":			panelVarIfElse("c17");			colorSwitch(thePanel, _hex.c17);			break;	}		function panelVarIfElse(theColor:String) 	{		switch(panelVarName) 		{			case "_deckColor":				_deckColor = theColor;				break;			case "_deckAccentColor":				_deckAccentColor = theColor;				break;			case "_splitDeckAccentColor":				_splitDeckAccentColor = theColor;				break;			case "_hullColor":				_hullColor = theColor;				break;			case "_mainPanelColor":				_mainPanelColor = theColor;				break;			case "_mainPanelAccentColor":				_mainPanelAccentColor = theColor;				break;			case "_secondPanelColor":				_secondPanelColor = theColor;				break;			case "_secondPanelAccentColor":				_secondPanelAccentColor = theColor;				break;			case "_transomAccentColor":				_transomAccentColor = theColor;				break;			case "_freerideAftColor":				_freerideAftColor = theColor				break;			case "_freerideBowColor":				_freerideBowColor = theColor;				break;			case "_vectorAftBlackColor":				_vectorAftBlackColor = theColor				break;			case "_vectorAftColorColor":				_vectorAftColorColor = theColor				break;			case "_vectorBowColor":				_vectorBowColor = theColor;				break;			case "_z1FreerideBowColor":				_z1FreerideBowColor = theColor;				break;			case "_streamlineColor":				_streamlineColor = theColor;				break;			case "_veFreerideColor":				_veFreerideColor = theColor;				break;			case "_accentVinylColor":				_accentVinylColor = theColor;				break;			case "_accentTextureColor":				_accentTextureColor = theColor;				break;			case "_dashAccentColor":				_dashAccentColor = theColor;				break;			case "_swimPlatformColor":				_swimPlatformColor = theColor;				break;			case "_towerColor":			  _towerColor = theColor;			  break;			case "_speakersColor":			  _speakersColor = theColor;			  break;		}	}}//settings functionsfunction moveLines(y1:Number, y2:Number, y3:Number, y4:Number, y5:Number, extVis:Boolean, intVis:Boolean, theSec:String):void {	if(Boolean(Object(sectionMenu.getChildByName("_exteriorSections"))) && Boolean(Object(sectionMenu.getChildByName("_interiorSections")))) 	{		var extSect:Sprite = Sprite(sectionMenu.getChildByName("_exteriorSections"));		var intSect:Sprite = Sprite(sectionMenu.getChildByName("_interiorSections"));				extSect.visible = extVis;		intSect.visible = intVis;				if(Boolean(Object(sectionMenu.getChildByName("_lines")))) 		{			var lines:Object = Object(sectionMenu.getChildByName("_lines"));						if(Boolean(lines.getChildAt(0))) 			{				var linesHolder:Sprite = Sprite(lines.getChildAt(0));								for(var i:uint = 1; i < linesHolder.numChildren; i++) 				{					switch(i) 					{						case 1:							linesHolder.getChildAt(1).y = y1;							break;						case 2:							linesHolder.getChildAt(2).y = y2;							break;						case 3:							linesHolder.getChildAt(3).y = y3;							break;					}				}			}		}	}		if(Boolean(Object(sectionMenu.getChildByName("_exterior"))) && Boolean(Object(sectionMenu.getChildByName("_graphic"))) && Boolean(Object(sectionMenu.getChildByName("_interior")))) 	{		var exteriorBtn:Object = Object(sectionMenu.getChildByName("_exterior"));		var graphicBtn:Object = Object(sectionMenu.getChildByName("_graphic"));		var interiorBtn:Object = Object(sectionMenu.getChildByName("_interior"));				graphicBtn.y = y4;		interiorBtn.y = y5;				switch(theSec) 		{			case "_exterior":				for(i = 0; i < exteriorBtn.getChildAt(0).numChildren; i++) 				{					exteriorBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 90;					graphicBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 0;					interiorBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 0;				}				break;			case "_graphic":				exteriorBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 0;				graphicBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 90;				interiorBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 0;				break;			case "_interior":				exteriorBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 0;				graphicBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 0;				interiorBtn.getChildAt(0).getChildAt(0).getChildAt(1).rotation = 90;				break;			default:				// Do nothing.		}	}}//---- Where am I? ----\\// where? \\//traceDisplayList(this);/*function traceDisplayList(container:Object, indentString:String = ""):void {	var child:DisplayObject;	for(var i:uint=0; i < container.numChildren; i++) {		child = container.getChildAt(i);		trace(indentString, child, child.name); 		if(container.getChildAt(i) is DisplayObjectContainer) {			traceDisplayList(DisplayObjectContainer(child), indentString + "    ");		}	}}*///---- Where am I? ----\\function sectionSwitch():void {	/*	// contact stuff	var contactBtn:ContactBuildClass = new ContactBuildClass();		contactBtn.name = "contactBtn";		try 	{		removeChild(this.getChildByName("contactBtn"));	} 	catch(error:TypeError) 	{			}		try 	{		this.parent.parent.removeChild(this.parent.parent.getChildByName("_theForm"));	} 	catch(error:TypeError) 	{			}*/		if(_section == "s1" || _section == "s2" || _section == "s3" || _section == "s4" || _section == "s5" || _section == "sMainPanelAccent" || _section == "s6" || _section == "sTransomAccent" || _section == "sSecondPanelAccent" || _section == "s7" || _section == "sTower") 	{	  if(_model == "20V" || _model == "20i")	  {	    moveLines(0, 0, 0, 145, 183, true, false, "_exterior");	  }	  else if(_model == "RZR")	  {	    moveLines(0, 0, 0, 195, 233, true, false, "_exterior");	  }	  else if(_model == "R20")	  {	    moveLines(0, 0, 0, 195, 233, true, false, "_exterior");	  }	  else	  {	    moveLines(0, 0, 0, 165, 203, true, false, "_exterior");	  }				try 		{			if(_interiorBtnActive == true) 			{				removeChild(interiorView);				_interiorBtnActive = false;			}		} 		catch(e:ArgumentError) {}				if(_model == "RZ4" || _model == "RZ2") 		{		  // Don't know where these are. This makes them go away though			rzDeckAccentDesignator.visible = false;			rzSplitAccentDesignator.visible = false;		}	} 	else if(_section == "s8") 	{		if(_model == "20V" || _model == "20i") 		{			moveLines(-110, -45, -45, 35, 139, false, false, "_graphic");			pathveFreerideColMenuMC.visible = true;		} 		else 		{		  // y - 20 if tower options 		  if(_model !== "20V" && _model !== "20i")		  {		    if(_model == "24Vé" || _model == "22Vé" || _model == "22i")  	    {		      moveLines(-130, -65, -65, 35, 139, false, false, "_graphic");		    }		    else		    {		      if(_model == "RZR")		      {		        moveLines(-160, -115, -115, 35, 119, false, false, "_graphic");		      }		      else if(_model == "R20")		      {		        moveLines(-160, -115, -115, 35, 119, false, false, "_graphic");		      }		      else		      {		        moveLines(-130, -85, -85, 35, 119, false, false, "_graphic");		      }		    }		  }		  else 		  {		    moveLines(-110, -65, -65, 35, 119, false, false, "_graphic");		  }		  		  if(_model == "24Vé" || _model == "22Vé" || _model == "22i")	    {	      pathveFreerideColMenuMC.visible = true;	    }	    else	    {			  pathveFreerideColMenuMC.visible = false;			}		}				try 		{			if(_interiorBtnActive == true) 			{					removeChild(interiorView);				_interiorBtnActive = false;			}		} 		catch(e:ArgumentError) {}				if(_model == "RZ4" || _model == "RZ2") 		{			rzDeckAccentDesignator.visible = false;			rzSplitAccentDesignator.visible = false;		}	} 	else if(_section == "s9" || _section == "s10" || _section == "s11" || _section == "s12") 	{ 	  if(_model == "20V" || _model == "20i")	  {	    moveLines(-110, -110, -10, 35, 74, false, true, "_interior");	  }	  else if(_model == "22i")	  {	    moveLines(-130, -130, -30, 35, 74, false, true, "_interior");	  }	  else if(_model == "RZR")	  {	    moveLines(-160, -160, -60, 35, 74, false, true, "_interior");	  }	  else if(_model == "R20")	  {	    moveLines(-160, -160, -60, 35, 74, false, true, "_interior");	  }	  else	  {	    moveLines(-130, -130, -10, 35, 74, false, true, "_interior");	  }				try 		{			if(_interiorBtnActive == false) 			{					addChild(interiorView);				_interiorBtnActive = true;			}		} 		catch(e:ArgumentError) 		{					}				if(_model == "RZ4" || _model == "RZ2") 		{			rzDeckAccentDesignator.visible = false;			rzSplitAccentDesignator.visible = false;		}	} 	else if(_section == "s13") 	{		try 		{			if(_interiorBtnActive == true) 			{					removeChild(interiorView);				_interiorBtnActive = false;			}		} 		catch(e:ArgumentError) {}				if(_model == "RZ4" || _model == "RZ2") 		{			rzDeckAccentDesignator.visible = false;			rzSplitAccentDesignator.visible = false;		}	}		pathgraphicMenuMC.visible = false;	pathrzrGraphicMenuMC.visible = false;	pathz1GraphicMenuMC.visible = false;	pathveGraphicMenuMC.visible = false;	pathcolorMenusMC.visible = true;	pathaccentTextureMenuMC.visible = false;	pathsummaryMC.y = 700;	pathprintBtnMC.visible = false;	//pathcontactBtnMC.visible = false;		swapMenus();		pathcolorMenusMC.visible = true;		function swapMenus():void 	{		if(Boolean(Object(root).getChildByName("deckColorMenu"))) 		{			Object(root).removeChild(deckColorMenu);		}				if(Boolean(Object(root).getChildByName("deckAccentColorMenu"))) 		{			Object(root).removeChild(deckAccentColorMenu);		}				if(Boolean(Object(root).getChildByName("splitDeckAccentColorMenu"))) 		{			Object(root).removeChild(splitDeckAccentColorMenu);		}				if(Boolean(Object(root).getChildByName("hullColorMenu"))) 		{			Object(root).removeChild(hullColorMenu);		}				if(Boolean(Object(root).getChildByName("mainPanelColorMenu"))) 		{			Object(root).removeChild(mainPanelColorMenu);		}				if(Boolean(Object(root).getChildByName("mainPanelAccentColorMenu"))) 		{			Object(root).removeChild(mainPanelAccentColorMenu);		}				if(Boolean(Object(root).getChildByName("secondPanelColorMenu"))) 		{			Object(root).removeChild(secondPanelColorMenu);		}				if(Boolean(Object(root).getChildByName("secondPanelAccentColorMenu"))) 		{			Object(root).removeChild(secondPanelAccentColorMenu);		}				if(Boolean(Object(root).getChildByName("transomAccentColorMenu"))) 		{			Object(root).removeChild(transomAccentColorMenu);		}				if(Boolean(Object(root).getChildByName("swimPlatformColorMenu"))) 		{			Object(root).removeChild(swimPlatformColorMenu);		}				if(Boolean(Object(root).getChildByName("towerColorMenu"))) 		{			Object(root).removeChild(towerColorMenu);		}				if(Boolean(Object(root).getChildByName("speakerColorMenu"))) 		{			Object(root).removeChild(speakerColorMenu);		}				if(Boolean(Object(root).getChildByName("accentVinylColorMenu"))) 		{			Object(root).removeChild(accentVinylColorMenu);		}				if(Boolean(Object(root).getChildByName("accentTextureColorMenu"))) 		{			Object(root).removeChild(accentTextureColorMenu);		}				if(Boolean(Object(root).getChildByName("dashAccentColorMenu"))) 		{			Object(root).removeChild(dashAccentColorMenu);		}	}		var extSects:DisplayObjectContainer = DisplayObjectContainer(sectionMenu.getChildByName("_exteriorSections"));	var deckSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_deck"));	var deckAccentSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_deckAccent"));	var splitDeckAccentSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_splitDeckAccent"));	var hullSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_hull"));	var mainPanelSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_mainPanel"));	var mainPanelAccentSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_mainPanelAccent"));	var secondPanelSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_secondPanel"));	var secondPanelAccentSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_secondPanelAccent"));	var transomAccentSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_transomAccent"));	var swimPlatformSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_swimPlatform"));	var towerSect:DisplayObjectContainer = DisplayObjectContainer(extSects.getChildByName("_tower"));	var intSects:DisplayObjectContainer = DisplayObjectContainer(sectionMenu.getChildByName("_interiorSections"));	var baseInteriorSect:DisplayObjectContainer = DisplayObjectContainer(intSects.getChildByName("_baseInterior"));	var accentVinylSect:DisplayObjectContainer = DisplayObjectContainer(intSects.getChildByName("_accentVinyl"));	var accentTextureSect:DisplayObjectContainer = DisplayObjectContainer(intSects.getChildByName("_accentTexture"));	var dashAccentSect:DisplayObjectContainer = DisplayObjectContainer(intSects.getChildByName("_dashAccent"));	var theTxt:TextField;	var colorInfo:ColorTransform;		function resetExtTexts():void 	{		if(Boolean(deckSect)) 		{			for(var i:uint = 0; i < extSects.numChildren; i++) 			{				theTxt = TextField(Sprite(Sprite(DisplayObjectContainer(extSects.getChildAt(i)).getChildAt(0)).getChildAt(0)).getChildAt(0));				colorInfo = theTxt.transform.colorTransform;				colorInfo.color = 0xFFFFFF;				theTxt.transform.colorTransform = colorInfo;			}		}	}		function resetIntTexts():void 	{		for(var i:uint = 0; i < intSects.numChildren; i++) 		{			theTxt = TextField(Sprite(Sprite(DisplayObjectContainer(intSects.getChildAt(i)).getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFFFFFF;			theTxt.transform.colorTransform = colorInfo;		}	}		switch(_section) 	{		case "s1":			if(Boolean(deckSect)) 			{				resetExtTexts();				SectionMenuSecondaryBtnClass(extSects.getChildByName("_deck")).removeSpecExtListeners("_deck");				theTxt = TextField(Sprite(Sprite(deckSect.getChildAt(0)).getChildAt(0)).getChildAt(0));				colorInfo = theTxt.transform.colorTransform;				colorInfo.color = 0xFF6600;				theTxt.transform.colorTransform = colorInfo;			}						if(_model == "24Vé" || _model == "22Vé") 			{				if(_vescheme == "classic") 				{					pathnextBtnMC.textLabel2.text = _sections.s4;				} 				else 				{					pathnextBtnMC.textLabel2.text = _sections.s2;				}			} 			else 			{				pathnextBtnMC.textLabel2.text = _sections.s2;			}						pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("deckColorMenu"))) 			{				Object(root).addChild(deckColorMenu);			}			break;		case "s2":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_deckAccent")).removeSpecExtListeners("_deckAccent");			theTxt = TextField(Sprite(Sprite(deckAccentSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						if(_model == "RZ4" || _model == "RZ2" || _model == "Z1") 			{				pathnextBtnMC.textLabel2.text = _sections.s3;			} 			else if(_model == "R20")			{			  pathnextBtnMC.textLabel2.text = _sections.s4;			}			else 			{				pathnextBtnMC.textLabel2.text = _sections.s5;			}						pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("deckAccentColorMenu"))) 			{				Object(root).addChild(deckAccentColorMenu);			}			break;		case "s3":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_splitDeckAccent")).removeSpecExtListeners("_splitDeckAccent");			theTxt = TextField(Sprite(Sprite(splitDeckAccentSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						pathnextBtnMC.textLabel2.text = _sections.s4;			pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("splitDeckAccentColorMenu"))) 			{				Object(root).addChild(splitDeckAccentColorMenu);			}			break;		case "s4":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_hull")).removeSpecExtListeners("_hull");			theTxt = TextField(Sprite(Sprite(hullSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						pathnextBtnMC.textLabel2.text = _sections.s5;			pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("hullColorMenu"))) 			{				Object(root).addChild(hullColorMenu);			}			break;		case "s5":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_mainPanel")).removeSpecExtListeners("_mainPanel");			theTxt = TextField(Sprite(Sprite(mainPanelSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						if(_model !== "Z1")			{			  if(_model == "RZR" || _model == "R20")			  {			    pathnextBtnMC.textLabel2.text = _sections.sMainPanelAccent;		    }		    else		    {		      pathnextBtnMC.textLabel2.text = _sections.s6;		    }			}			else			{			  pathnextBtnMC.textLabel2.text = _sections.sTransomAccent;			}						pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("mainPanelColorMenu"))) 			{				Object(root).addChild(mainPanelColorMenu);			}			break;		case "sMainPanelAccent":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_mainPanelAccent")).removeSpecExtListeners("_mainPanelAccent");			theTxt = TextField(Sprite(Sprite(mainPanelAccentSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;			if(_model == "RZR")			{			  pathnextBtnMC.textLabel2.text = _sections.s6;			}			else			{			  pathnextBtnMC.textLabel2.text = _sections.s7;			}			pathcolorMenusMC.visible = false;			if(!Boolean(Object(root).getChildByName("mainPanelAccentColorMenu"))) 			{				Object(root).addChild(mainPanelAccentColorMenu);			}			break;		case "s6":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_secondPanel")).removeSpecExtListeners("_secondPanel");			theTxt = TextField(Sprite(Sprite(secondPanelSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						if(_model == "RZR")			{			  pathnextBtnMC.textLabel2.text = _sections.sSecondPanelAccent;			}			else			{			  pathnextBtnMC.textLabel2.text = _sections.s7;		  }						pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("secondPanelColorMenu"))) 			{				Object(root).addChild(secondPanelColorMenu);			}			break;	  case "sTransomAccent":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_transomAccent")).removeSpecExtListeners("_transomAccent");			theTxt = TextField(Sprite(Sprite(transomAccentSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;			pathnextBtnMC.textLabel2.text = _sections.s7;			pathcolorMenusMC.visible = false;			if(!Boolean(Object(root).getChildByName("transomAccentColorMenu"))) 			{				Object(root).addChild(transomAccentColorMenu);			}			break;		case "sSecondPanelAccent":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_secondPanelAccent")).removeSpecExtListeners("_secondPanelAccent");			theTxt = TextField(Sprite(Sprite(secondPanelAccentSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;			pathnextBtnMC.textLabel2.text = _sections.s7;			pathcolorMenusMC.visible = false;			if(!Boolean(Object(root).getChildByName("secondPanelAccentColorMenu"))) 			{				Object(root).addChild(secondPanelAccentColorMenu);			}			break;		case "s7":			resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_swimPlatform")).removeSpecExtListeners("_swimPlatform");			theTxt = TextField(Sprite(Sprite(swimPlatformSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						if(_model == "20V" || _model == "20i" || _model == "R20")			{			  pathnextBtnMC.textLabel2.text = _sections.s8;			}			//else if(_model == "R20")			//{			//  pathnextBtnMC.textLabel2.text = _sections.s9;			//}			else			{			  pathnextBtnMC.textLabel2.text = _sections.sTower;		  }		  			pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("swimPlatformColorMenu"))) 			{				Object(root).addChild(swimPlatformColorMenu);			}			break;		case "sTower":		  resetExtTexts();			SectionMenuSecondaryBtnClass(extSects.getChildByName("_tower")).removeSpecExtListeners("_tower");			theTxt = TextField(Sprite(Sprite(towerSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						pathnextBtnMC.textLabel2.text = _sections.s8;			pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("towerColorMenu"))) 			{				Object(root).addChild(towerColorMenu);			}						if(!Boolean(Object(root).getChildByName("speakerColorMenu"))) 			{				Object(root).addChild(speakerColorMenu);			}			break;		case "s8":			pathcolorMenusMC.x = 31;			pathcolorMenusMC.y = 204;			pathnextBtnMC.textLabel2.text = _sections.s9;						if(_model == "RZ4" || _model == "RZ2") 			{				pathgraphicMenuMC.visible = true;								if(_rzGraphicName == "freeride") 				{					pathfreerideGraphicBtnMC.textLabel.textColor = overColor;					pathpureGraphicBtnMC.textLabel.textColor = outColorWhite;					pathrzVectorGraphicBtnMC.textLabel.textColor = outColorWhite;					pathrzVectorGraphicBtnMC.activated = true;					pathfreerideGraphicBtnMC.activated = false;					pathpureGraphicBtnMC.activated = true;					pathaftFreerideAcctColMenuMC.visible = true;    			pathbowFreerideAcctColMenuMC.visible = true;					pathrzAftVectorBlackColMenuMC.visible = false;          pathrzAftVectorColMenuMC.visible = false;          pathrzBowVectorColMenuMC.visible = false;				}				else if(_rzGraphicName == "vector")				{				  pathfreerideGraphicBtnMC.textLabel.textColor = outColorWhite;					pathpureGraphicBtnMC.textLabel.textColor = outColorWhite;					pathrzVectorGraphicBtnMC.textLabel.textColor = overColor;					pathrzVectorGraphicBtnMC.activated = false;					pathfreerideGraphicBtnMC.activated = true;					pathpureGraphicBtnMC.activated = false;					pathaftFreerideAcctColMenuMC.visible = false;    			pathbowFreerideAcctColMenuMC.visible = false;					pathrzAftVectorBlackColMenuMC.visible = true;          pathrzAftVectorColMenuMC.visible = true;          pathrzBowVectorColMenuMC.visible = true;				} 				else 				{					pathfreerideGraphicBtnMC.textLabel.textColor = outColorWhite;					pathpureGraphicBtnMC.textLabel.textColor = overColor;					pathrzVectorGraphicBtnMC.textLabel.textColor = outColorWhite;					pathrzVectorGraphicBtnMC.activated = true;					pathfreerideGraphicBtnMC.activated = true;					pathpureGraphicBtnMC.activated = false;					pathaftFreerideAcctColMenuMC.visible = false;    			pathbowFreerideAcctColMenuMC.visible = false;					pathrzAftVectorBlackColMenuMC.visible = false;          pathrzAftVectorColMenuMC.visible = false;          pathrzBowVectorColMenuMC.visible = false;				}			}			else if(_model == "RZR")			{			  pathrzrGraphicMenuMC.visible = true;			  			  if(_rzGraphicName == "freeride") 				{					pathrzrFreerideGraphicBtnMC.textLabel.textColor = overColor;					pathvectorGraphicBtnMC.textLabel.textColor = outColorWhite;					pathrzrFreerideGraphicBtnMC.activated = false;					pathvectorGraphicBtnMC.activated = true;					pathrzrAftFreerideAcctColMenuMC.visible = true;    			pathrzrBowFreerideAcctColMenuMC.visible = true;					pathaftVectorBlackColMenuMC.visible = false;          pathaftVectorColMenuMC.visible = false;          pathbowVectorColMenuMC.visible = false;				} 				else 				{					pathrzrFreerideGraphicBtnMC.textLabel.textColor = outColorWhite;					pathvectorGraphicBtnMC.textLabel.textColor = overColor;					pathrzrFreerideGraphicBtnMC.activated = true;					pathvectorGraphicBtnMC.activated = false;					pathrzrAftFreerideAcctColMenuMC.visible = false;    			pathrzrBowFreerideAcctColMenuMC.visible = false;					pathaftVectorBlackColMenuMC.visible = true;          pathaftVectorColMenuMC.visible = true;          pathbowVectorColMenuMC.visible = true;				}			} 			else if(_model == "Z1") 			{				pathz1GraphicMenuMC.visible = true;								if(_z1GraphicName == "freeride") 				{					pathaftZ1FreerideAcctColMenuMC.visible = true;					pathbowZ1FreerideAcctColMenuMC.visible = true;					pathstreamlineColMenuMC.visible = false;					pathz1FreerideGraphicBtnMC.textLabel.textColor = overColor;					pathstreamlineGraphicBtnMC.textLabel.textColor = outColorWhite;					pathz1VectorGraphicBtnMC.textLabel.textColor = outColorWhite;					pathz1AftVectorBlackColMenuMC.visible = false;          pathz1AftVectorColMenuMC.visible = false;          pathz1BowVectorColMenuMC.visible = false;          pathz1VectorGraphicBtnMC.activated = true;          pathz1FreerideGraphicBtnMC.activated = false;          pathstreamlineGraphicBtnMC.activated = true;				} 				else if(_z1GraphicName == "vector")				{				  pathaftZ1FreerideAcctColMenuMC.visible = false;					pathbowZ1FreerideAcctColMenuMC.visible = false;					pathstreamlineColMenuMC.visible = false;					pathz1FreerideGraphicBtnMC.textLabel.textColor = outColorWhite;					pathstreamlineGraphicBtnMC.textLabel.textColor = outColorWhite;					pathz1VectorGraphicBtnMC.textLabel.textColor = overColor;					pathz1AftVectorBlackColMenuMC.visible = true;          pathz1AftVectorColMenuMC.visible = true;          pathz1BowVectorColMenuMC.visible = true;          pathz1VectorGraphicBtnMC.activated = false;          pathz1FreerideGraphicBtnMC.activated = true;          pathstreamlineGraphicBtnMC.activated = true;				}				else 				{					pathaftZ1FreerideAcctColMenuMC.visible = false;					pathbowZ1FreerideAcctColMenuMC.visible = false;					pathstreamlineColMenuMC.visible = true;					pathz1FreerideGraphicBtnMC.textLabel.textColor = outColorWhite;					pathstreamlineGraphicBtnMC.textLabel.textColor = overColor;					pathz1VectorGraphicBtnMC.textLabel.textColor = outColorWhite;					pathz1AftVectorBlackColMenuMC.visible = false;          pathz1AftVectorColMenuMC.visible = false;          pathz1BowVectorColMenuMC.visible = false;          pathz1VectorGraphicBtnMC.activated = true;          pathz1FreerideGraphicBtnMC.activated = true;          pathstreamlineGraphicBtnMC.activated = false;				}			} 			else if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 			{				pathveGraphicMenuMC.visible = true;								if(_model == "22i" || _model == "20V" || _model == "20i") 				{					pathectoBtnMC.visible = false;				}								if(_veGraphicName == "freeride") 				{					pathveFreerideColMenuMC.visible = true;				} 				else 				{					pathveFreerideColMenuMC.visible = false;				}			}						pathcolorMenusMC.visible = false;			break;		case "s9":			resetIntTexts();			SectionMenuSecondaryBtnClass(intSects.getChildByName("_baseInterior")).removeSpecIntListeners("_baseInterior");			theTxt = TextField(Sprite(Sprite(baseInteriorSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						pathnextBtnMC.textLabel2.text = _sections.s10;			pathcolorMenusMC.x = 29;			pathcolorMenusMC.y = -64;			break;		case "s10":			resetIntTexts();			SectionMenuSecondaryBtnClass(intSects.getChildByName("_accentVinyl")).removeSpecIntListeners("_accentVinyl");			theTxt = TextField(Sprite(Sprite(accentVinylSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						pathnextBtnMC.textLabel2.text = _sections.s11;			pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("accentVinylColorMenu"))) 			{				Object(root).addChild(accentVinylColorMenu);			}			break;		case "s11":			resetIntTexts();			SectionMenuSecondaryBtnClass(intSects.getChildByName("_accentTexture")).removeSpecIntListeners("_accentTexture");			theTxt = TextField(Sprite(Sprite(accentTextureSect.getChildAt(0)).getChildAt(0)).getChildAt(0));			colorInfo = theTxt.transform.colorTransform;			colorInfo.color = 0xFF6600;			theTxt.transform.colorTransform = colorInfo;						if(_model == "RZ4" || _model == "RZ2" || _model == "24Vé" || _model == "22Vé" || _model == "Z1") {				pathnextBtnMC.textLabel2.text = _sections.s12;			} 			else 			{				pathnextBtnMC.textLabel2.text = _sections.s13;			}						if(_model == "22i" || _model == "20i" || _model == "20V") 			{				if(!Boolean(Object(root).getChildByName("accentTextureColorMenu"))) 				{					Object(root).addChild(accentTextureColorMenu);				}								pathaccentTextureMenuMC.scaleX = .5;				pathaccentTextureMenuMC.scaleY = .5;				pathaccentTextureMenuMC.x = 110;				pathaccentTextureMenuMC.y = 305;			}						pathcolorMenusMC.visible = false;			pathaccentTextureMenuMC.visible = true;			break;		case "s12":			resetIntTexts();			try 			{				SectionMenuSecondaryBtnClass(intSects.getChildByName("_dashAccent")).removeSpecIntListeners("_dashAccent");				theTxt = TextField(Sprite(Sprite(dashAccentSect.getChildAt(0)).getChildAt(0)).getChildAt(0));				colorInfo = theTxt.transform.colorTransform;				colorInfo.color = 0xFF6600;				theTxt.transform.colorTransform = colorInfo;			} 			catch(e:TypeError) {}						pathnextBtnMC.textLabel2.text = _sections.s13;			pathcolorMenusMC.visible = false;						if(!Boolean(Object(root).getChildByName("dashAccentColorMenu"))) 			{				Object(root).addChild(dashAccentColorMenu);			}			break;		case "s13":			//addChild(contactBtn);			pathcolorMenusMC.visible = false;			pathsummaryMC.y = 380;			pathsummaryMC.deckColorTxt.text = _colorNames[_deckColor];						if(_model != "24Vé" && _model != "22Vé") 			{				pathsummaryMC.deckAccentColorTxt.text = _colorNames[_deckAccentColor];			} 			else 			{				if(_vescheme == "classic") 				{					pathsummaryMC.deckAccentColorTxt.text = "N/A";				} 				else 				{					pathsummaryMC.deckAccentColorTxt.text = _colorNames[_deckAccentColor];				}			}						if(_model == "RZ4" || _model == "RZ2" || _model == "Z1") 			{				pathsummaryMC.splitDeckAccentColorTxt.text = _colorNames[_splitDeckAccentColor];			}						pathsummaryMC.hullColorTxt.text = _colorNames[_hullColor];			pathsummaryMC.mainPanelColorTxt.text = _colorNames[_mainPanelColor];						if(_model != "Z1") 			{				pathsummaryMC.secondPanelColorTxt.text = _colorNames[_secondPanelColor];			} 			else 			{				pathsummaryMC.secondPanelColorTxt.text = "N/A";			}						if(_model == "RZ4" || _model == "RZ2") 			{ 				pathsummaryMC.graphicTxt.text = _rzGraphicName;			} 			else if(_model == "RZR")			{			  pathsummaryMC.graphicTxt.text = _rzGraphicName;			}			else if(_model == "R20")			{			  pathsummaryMC.graphicTxt.text = "N/A";			}			else if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 			{				pathsummaryMC.graphicTxt.text = _veGraphicName;			} 			else if(_model == "Z1") 			{				pathsummaryMC.graphicTxt.text = _z1GraphicName;			}						if(_model == "RZ4" || _model == "RZ2") 			{				if(_rzGraphicName == "freeride") 				{					pathsummaryMC.graphicAftColorTxt.text = _colorNames[_freerideAftColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_freerideBowColor];				} 				else if(_rzGraphicName == "vector")				{				  pathsummaryMC.graphicAftColorTxt.text = _colorNames[_vectorAftColorColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_vectorBowColor];				}				else 				{					pathsummaryMC.graphicAftColorTxt.text = _colorNames.c5;					pathsummaryMC.graphicBowColorTxt.text = _colorNames.c5;				}			}			else if(_model == "RZR")			{			  if(_rzGraphicName == "freeride") 				{					pathsummaryMC.graphicAftColorTxt.text = _colorNames[_freerideAftColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_freerideBowColor];				} 				else 				{					pathsummaryMC.graphicAftColorTxt.text = _colorNames[_vectorAftColorColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_vectorBowColor];				}			} 			else if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 			{				pathsummaryMC.graphicAftColorTxt.text = "N/A";				pathsummaryMC.graphicBowColorTxt.text = "N/A";			} 			else if(_model == "Z1") 			{				if(_z1GraphicName == "freeride") 				{					pathsummaryMC.graphicAftColorTxt.text = _colorNames[_freerideAftColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_z1FreerideBowColor];				} 				else if(_z1GraphicName == "vector")				{				  pathsummaryMC.graphicAftColorTxt.text = _colorNames[_vectorAftColorColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_vectorBowColor];				}				else 				{					pathsummaryMC.graphicAftColorTxt.text = _colorNames[_streamlineColor];					pathsummaryMC.graphicBowColorTxt.text = _colorNames[_streamlineColor];				}			}						pathsummaryMC.intPkgColorTxt.text = _intPkgColor;			pathsummaryMC.intAccentColorTxt.text = _colorNames[_accentVinylColor];			pathsummaryMC.accentTextureTxt.text = _accentTextureName;						if(_model != "22i" && _model != "20V" && _model != "20i") 			{				pathsummaryMC.dashAccentColorTxt.text = _colorNames[_dashAccentColor];			} 			else 			{				pathsummaryMC.dashAccentColorTxt.text = "N/A";			}						pathsummaryMC.swimPlatformColorTxt.text = _colorNames[_swimPlatformColor];			pathprintBtnMC.visible = true;			//pathcontactBtnMC.visible = true;			break;	}}function colorSwitch(theMC:MovieClip, theColor:Number):void {	var _colorInfo:ColorTransform = theMC.transform.colorTransform;	_colorInfo.color = theColor;	theMC.transform.colorTransform = _colorInfo;}function initializeOptions():void {  // show accent texture menu if at that section	if(_section != "s10") 	{		pathaccentTextureMenuMC.visible = false;	} 	else 	{		pathaccentTextureMenuMC.visible = true;	}		colorSwitch(_modelViewName.content.deckMC.deckBgMC, _hex[_deckColor]); // set deck color		// check ve color scheme, and show/hide accent depending on scheme.	if(_vescheme == "flex") 	{		_modelViewName.content.deckMC.deckAccentBgMC.visible = true;		pathflexBtnMC.colorSchemeSelectIconMC.visible = true;		pathclassicBtnMC.colorSchemeSelectIconMC.visible = false;	} 	else 	{		_modelViewName.content.deckMC.deckAccentBgMC.visible = false;		pathflexBtnMC.colorSchemeSelectIconMC.visible = false;		pathclassicBtnMC.colorSchemeSelectIconMC.visible = true;	}		colorSwitch(_modelViewName.content.deckMC.deckAccentBgMC, _hex[_deckAccentColor]);		// set split accent color on rz's	if(_model == "RZ4" || _model == "RZ2" || _model == "Z1" || _model == "RZR") 	{		colorSwitch(_modelViewName.content.deckMC.splitDeckAccentMC, _hex[_splitDeckAccentColor]);	}		colorSwitch(_modelViewName.content.hullMC.hullBgMC, _hex[_hullColor]); // set hull color	colorSwitch(_modelViewName.content.mainPanelMC.mainPanelBgMC, _hex[_mainPanelColor]); // set main panel color		// set second panel color if not Z1	if(_model !== "Z1" && _model !== "R20") 	{	  colorSwitch(_modelViewName.content.secondPanelMC.secondPanelBgMC, _hex[_secondPanelColor]);	}		// set second and main panel accent on RZR	if(_model == "RZR" || _model == "R20")	{	  colorSwitch(_modelViewName.content.mainPanelMC.mainPanelAccentMC, _hex[_mainPanelAccentColor]);	  if(_model == "RZR")	  {	    colorSwitch(_modelViewName.content.secondPanelMC.secondPanelAccentMC, _hex[_secondPanelAccentColor]);    }	}		// set transom accent color on Z1	if(_model == "Z1")	{	  try	  {	    colorSwitch(_modelViewName.content.transomAccentMC, _hex[_transomAccentColor]);	  }	  catch(e:TypeError) {}	}		// set tower color	if(_model !== "20V" && _model !== "20i" && _model !== "R20")	{	  colorSwitch(_modelViewName.content.towerMC.towerBodyMC, _hex[_towerColor]);	  colorSwitch(_modelViewName.content.towerMC.speakersColorMC, _hex[_speakersColor]);	}		// graphics if/else	if(_model == "RZ4" || _model == "RZ2") 	{		if(_rzGraphicName == "freeride") 		{			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;		}		else if(_rzGraphicName == "vector")		{		  _modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = true;		} 		else 		{			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;		}				colorSwitch(_modelViewName.content.graphicMC.graphic1MC.freerideFrontMC, _hex[_freerideBowColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic1MC.freerideBackMC, _hex[_freerideAftColor]);		colorSwitch(_modelViewName.content.graphicMC.graphicVectorMC.vectorFrontMC, _hex[_vectorBowColor]);		colorSwitch(_modelViewName.content.graphicMC.graphicVectorMC.vectorRearBlackMC, _hex[_vectorAftBlackColor]);		colorSwitch(_modelViewName.content.graphicMC.graphicVectorMC.vectorRearColorMC, _hex[_vectorAftColorColor]);	}	else if(_model == "RZR")	{	  if(_rzGraphicName == "freeride") 		{			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;		} 		else 		{			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;		}				colorSwitch(_modelViewName.content.graphicMC.graphic1MC.freerideFrontMC, _hex[_freerideBowColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic1MC.freerideBackMC, _hex[_freerideAftColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic2MC.vectorFrontMC, _hex[_vectorBowColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic2MC.vectorRearBlackMC, _hex[_vectorAftBlackColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic2MC.vectorBackColorMC, _hex[_vectorAftColorColor]);	} 	else if(_model == "24Vé" || _model == "22Vé") 	{		if(_veGraphicName == "freeride") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = true;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = true;			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			pathveFreerideBtnMC.activated = false;			pathectoBtnMC.activated = true;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = true;			pathveFreerideBtnMC.textLabel.textColor = overColor;			pathectoBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;		} 		else if(_veGraphicName == "ecto") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			pathveFreerideBtnMC.activated = true;			pathectoBtnMC.activated = false;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = true;						pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			pathectoBtnMC.textLabel.textColor = overColor;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;		} 		else if(_veGraphicName == "edge") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = true;			pathveFreerideBtnMC.activated = true;			pathectoBtnMC.activated = true;			pathedgeBtnMC.activated = false;			pathlimitedBtnMC.activated = true;						pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			pathectoBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = overColor;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;		} 		else if(_veGraphicName == "limited") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			pathveFreerideBtnMC.activated = true;			pathectoBtnMC.activated = true;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = false;						pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			pathectoBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = overColor;		}				colorSwitch(_modelViewName.content.graphicMC.graphicFreerideMC, _hex[_veFreerideColor]);	} 	else if(_model == "Z1") 	{		if(_z1GraphicName == "freeride") 		{			_modelViewName.content.graphicMC.graphic1MC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;						pathz1FreerideGraphicBtnMC.textLabel.textColor = overColor;			pathz1VectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathstreamlineGraphicBtnMC.textLabel.textColor = outColorWhite;						pathz1FreerideGraphicBtnMC.activated = false;			pathz1VectorGraphicBtnMC.activated = true;			pathstreamlineGraphicBtnMC.activated = true;		}		else if(_z1GraphicName == "vector")		{		  _modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphicVectorMC.visible = true;						pathz1FreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathz1VectorGraphicBtnMC.textLabel.textColor = overColor;			pathstreamlineGraphicBtnMC.textLabel.textColor = outColorWhite;						pathz1FreerideGraphicBtnMC.activated = true;			pathz1VectorGraphicBtnMC.activated = false;			pathstreamlineGraphicBtnMC.activated = true;		} 		else 		{			_modelViewName.content.graphicMC.graphic1MC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphicVectorMC.visible = false;						pathz1FreerideGraphicBtnMC.textLabel.textColor = outColorWhite;			pathz1VectorGraphicBtnMC.textLabel.textColor = outColorWhite;			pathstreamlineGraphicBtnMC.textLabel.textColor = overColor;						pathz1FreerideGraphicBtnMC.activated = true;			pathz1VectorGraphicBtnMC.activated = true;			pathstreamlineGraphicBtnMC.activated = false;		}				colorSwitch(_modelViewName.content.graphicMC.graphic1MC.freerideFrontMC, _hex[_z1FreerideBowColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic1MC.freerideBackMC, _hex[_freerideAftColor]);		colorSwitch(_modelViewName.content.graphicMC.graphic2MC, _hex[_streamlineColor]);		colorSwitch(_modelViewName.content.graphicMC.graphicVectorMC.vectorFrontMC, _hex[_vectorBowColor]);		colorSwitch(_modelViewName.content.graphicMC.graphicVectorMC.vectorRearBlackMC, _hex[_vectorAftBlackColor]);		colorSwitch(_modelViewName.content.graphicMC.graphicVectorMC.vectorRearColorMC, _hex[_vectorAftColorColor]);	} 	else if(_model == "22i" || _model == "20V" || _model == "20i") 	{ 		if(_veGraphicName == "ecto") 		{			_veGraphicName = "freeride";		}		if(_veGraphicName == "freeride") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = true;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = true;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			pathveFreerideBtnMC.activated = false;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = true;						pathveFreerideBtnMC.textLabel.textColor = overColor;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;		} 		else if(_veGraphicName == "edge") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = false;			_modelViewName.content.graphicMC.graphic3MC.visible = true;			pathveFreerideBtnMC.activated = true;			pathedgeBtnMC.activated = false;			pathlimitedBtnMC.activated = true;						pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = overColor;			pathlimitedBtnMC.textLabel.textColor = outColorWhite;		} 		else if(_veGraphicName == "limited") 		{			_modelViewName.content.graphicMC.graphicFreerideMC.visible = false;			_modelViewName.content.graphicMC.tigeEmblemMC.visible = false;			_modelViewName.content.graphicMC.graphic2MC.visible = true;			_modelViewName.content.graphicMC.graphic3MC.visible = false;			pathveFreerideBtnMC.activated = true;			pathedgeBtnMC.activated = true;			pathlimitedBtnMC.activated = false;						pathveFreerideBtnMC.textLabel.textColor = outColorWhite;			pathedgeBtnMC.textLabel.textColor = outColorWhite;			pathlimitedBtnMC.textLabel.textColor = overColor;		}				colorSwitch(_modelViewName.content.graphicMC.graphicFreerideMC, _hex[_veFreerideColor]);	}	else if(_model == "R20")	{	  // no graphics yet	}		// set interior package	if(_intPkgColor == "platinum") 	{		_modelViewName.content.intPkgMC.intPkgMushMC.visible = false;	} 	else 	{		_modelViewName.content.intPkgMC.intPkgMushMC.visible = true;	}		colorSwitch(_modelViewName.content.accentVinylMC.accentVinylBgMC, _hex[_accentVinylColor]); // set accent vinyl color		// set accent texture	try 	{		switch(_accentTextureName) 		{			case "brushed silk":				try 				{					_modelViewName.content.accentTextureMC.brushedMC.visible = true;					_modelViewName.content.accentTextureMC.nexusMC.visible = false;				} 				catch(e:TypeError) 				{									}				break;			case "nexus":				try 				{					_modelViewName.content.accentTextureMC.brushedMC.visible = false;					_modelViewName.content.accentTextureMC.nexusMC.visible = true;				} 				catch(e:TypeError) 				{									}				break;		}				if(_model == "22i" || _model == "20V" || _model == "20i") 		{			if(_accentTextureColor != "none") 			{				try 				{					colorSwitch(_modelViewName.content.accentTextureMC.accentTextureBgMC, _hex[_accentTextureColor]);										_modelViewName.content.accentTextureMC.brushedMC.visible = false;					_modelViewName.content.accentTextureMC.nexusMC.visible = false;				} 				catch(e:TypeError) 				{									}			}		}	} 	catch(e:TypeError) {}		// set dash accent color	if(_model !== "22i" && _model !== "20V" && _model !== "20i") 	{		colorSwitch(_modelViewName.content.dashAccentMC.dashAccentBgMC, _hex[_dashAccentColor]);	}		colorSwitch(_modelViewName.content.swimPlatformMC.swimPlatformBgMC, _hex[_swimPlatformColor]); // set swim platform color		// set graphic menu if at that section	if(_section !== "s7") 	{		pathgraphicMenuMC.visible = false;		pathrzrGraphicMenuMC.visible = false;		pathz1GraphicMenuMC.visible = false;		pathveGraphicMenuMC.visible = false;	} 	else if(_section == "s7") 	{		if(_model == "RZ4" || _model == "RZ2") 		{			pathgraphicMenuMC.visible = true;			pathrzrGraphicMenuMC.visible = false;			pathz1GraphicMenuMC.visible = false;			pathveGraphicMenuMC.visible = false;						pathrzGraphicMenuMC.y = 128.9;		} 		else if(_model == "RZR")		{		  pathgraphicMenuMC.visible = false;			pathrzrGraphicMenuMC.visible = true;			pathz1GraphicMenuMC.visible = false;			pathveGraphicMenuMC.visible = false;						pathrzrGraphicSelectMenuMC.y = 128.9;		}		else if(_model == "Z1") 		{			pathgraphicMenuMC.visible = false;			pathrzrGraphicMenuMC.visible = false;			pathz1GraphicMenuMC.visible = true;			pathveGraphicMenuMC.visible = false;		} 		else if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 		{			pathveGraphicMenuMC.visible = true;			pathrzrGraphicMenuMC.visible = false;			pathgraphicMenuMC.visible = false;			pathz1GraphicMenuMC.visible = false;			pathectoBtnMC.visible = false;						pathveGraphicMenuMC.y = 143.9;		} 		else 		{			pathgraphicMenuMC.visible = false;			pathrzrGraphicMenuMC.visible = false;			pathz1GraphicMenuMC.visible = false;			pathveGraphicMenuMC.visible = false;		}	} 	else 	{		pathgraphicMenuMC.visible = false;		pathrzrGraphicMenuMC.visible = false;		pathz1GraphicMenuMC.visible = false;		pathveGraphicMenuMC.visible = false;	}		// set thumb menu for model views	if(_model == "RZ4" || _model == "RZ2") 	{		pathz1thumbMenuMC.visible = false;		paththumbMenuMC.visible = true;		pathvethumbMenuMC.visible = false;	} 	else if(_model == "Z1") 	{		pathz1thumbMenuMC.visible = true;		paththumbMenuMC.visible = false;		pathvethumbMenuMC.visible = false;	} 	else if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 	{ 		pathz1thumbMenuMC.visible = false;		paththumbMenuMC.visible = false;		pathvethumbMenuMC.visible = true;	} 	else 	{		pathz1thumbMenuMC.visible = false;		paththumbMenuMC.visible = true;		pathvethumbMenuMC.visible = false;	}		// show/hide deck accents depending on color scheme for certain models	if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 	{		if(_vescheme == "classic") 		{			if(Boolean(Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_deckAccent"))) 			{				Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_deckAccent").visible = false;			}		} 		else 		{			if(Boolean(Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_deckAccent"))) 			{				Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_deckAccent").visible = true;			}		}	} 	else 	{		if(Boolean(Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_deckAccent"))) 		{			Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_deckAccent").visible = true;		}	}		// set next button label for deck accents depending on color scheme for certain models	if(_model == "24Vé" || _model == "22Vé" || _model == "22i" || _model == "20V" || _model == "20i") 	{		if(_vescheme == "classic") 		{			if(_section == "s1") 			{				pathnextBtnMC.textLabel2.text = _sections.s3;			}		} 		else 		{			if(_section == "s1") 			{				pathnextBtnMC.textLabel2.text = _sections.s2;			}		}	} 	else 	{		if(_section == "s1") 		{			pathnextBtnMC.textLabel2.text = _sections.s2;		}	}		// show split deck accent for RZ's and Z1	if(_model == "RZ4" || _model == "RZ2" || _model == "Z1" || _model == "RZR") 	{		if(Boolean(Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_splitDeckAccent"))) 		{			Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_splitDeckAccent").visible = true;		}	} 	else 	{		if(Boolean(Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_splitDeckAccent"))) 		{			Object(sectionMenu.getChildByName("_exteriorSections")).getChildByName("_splitDeckAccent").visible = false;		}	}		if(_model == "R20")	{	  // no graphic yet	}	else	{	  // set graphic color text  	pathaftFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideAftColor];  	pathbowFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideBowColor];  	pathrzAftVectorBlackColMenuMC.textDesc.text = _colorNames[_vectorAftBlackColor];  	pathrzAftVectorColMenuMC.textDesc.text = _colorNames[_vectorAftColorColor];  	pathrzBowVectorColMenuMC.textDesc.text = _colorNames[_vectorBowColor];  	pathrzrAftFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideAftColor];  	pathrzrBowFreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideBowColor];  	pathaftVectorBlackColMenuMC.textDesc.text = _colorNames[_vectorAftBlackColor];  	pathaftVectorColMenuMC.textDesc.text = _colorNames[_vectorAftColorColor];  	pathbowVectorColMenuMC.textDesc.text = _colorNames[_vectorBowColor];  	pathaftZ1FreerideAcctColMenuMC.textDesc.text = _colorNames[_freerideAftColor];  	pathbowZ1FreerideAcctColMenuMC.textDesc.text = _colorNames[_z1FreerideBowColor];  	pathstreamlineColMenuMC.textDesc.text = _colorNames[_streamlineColor];  	pathz1AftVectorBlackColMenuMC.textDesc.text = _colorNames[_vectorAftBlackColor];  	pathz1AftVectorColMenuMC.textDesc.text = _colorNames[_vectorAftColorColor];  	pathz1BowVectorColMenuMC.textDesc.text = _colorNames[_vectorBowColor];  	pathveFreerideColMenuMC.textDesc.text = _colorNames[_veFreerideColor];  }		// run section check and menu setup	sectionSwitch();}//--------------</functions>--------------\\