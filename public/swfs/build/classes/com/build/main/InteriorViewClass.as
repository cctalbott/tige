package com.build.main {	import flash.display.Loader;	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.text.TextField;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.geom.Transform;	import flash.geom.ColorTransform;	import interiorBtnMC;	import closeInteriorBtnMC;		public class InteriorViewClass extends Sprite {		private var interiorBtn:interiorBtnMC = new interiorBtnMC();		private var closeInteriorBtn:closeInteriorBtnMC = new closeInteriorBtnMC();		private var interiorBg:Shape = Shape(MovieClip(interiorBtn.getChildByName("btnBgMC")).getChildAt(0));		private var interiorTxt:TextField = TextField(interiorBtn.getChildByName("textLabel"));		private var loadInterior:Loader = new Loader();		private var grayOverlay:Shape = new Shape();				public function InteriorViewClass(theView) 		{			init(theView);		}				private function init(theView):void 		{			interiorBtn.name = "interiorBtn";			interiorBtn.x = 18;						if(theView == "22i" || theView == "20V" || theView == "20i" || theView == "RZR" || theView == "R20")			{			  interiorBtn.y = 255;			}			else			{			  interiorBtn.y = 275;			}						interiorBtn.buttonMode = true;			interiorBtn.mouseChildren = false;			addChild(interiorBtn);			interiorBtn.addEventListener(MouseEvent.MOUSE_OVER, interiorBtnOver, false, 0, true);			interiorBtn.addEventListener(MouseEvent.MOUSE_OUT, interiorBtnOut, false, 0, true);			loadInterior.x = 210;			loadInterior.y = 60;			loadInterior.name = "loadInterior";			this.addEventListener(Event.ADDED_TO_STAGE, InteriorViewAdded, false, 0, true);			this.addEventListener(Event.REMOVED_FROM_STAGE, InteriorViewRemoved, false, 0, true);			closeInteriorBtn.x = 23;			closeInteriorBtn.y = 7;			closeInteriorBtn.buttonMode = true;			closeInteriorBtn.mouseChildren = false;			closeInteriorBtn.addEventListener(MouseEvent.CLICK, closeInteriorBtnClicked, false, 0, true);			grayOverlay.graphics.beginFill(0x333333, 1);			grayOverlay.graphics.drawRect(210, 60, 775, 449);			grayOverlay.graphics.endFill();		}				private function InteriorViewAdded(event:Event):void 		{			interiorBtn.addEventListener(MouseEvent.CLICK, interiorBtnClicked, false, 0, true);		}				private function InteriorViewRemoved(event:Event):void 		{			try {				MovieClip(parent.parent.parent).removeChild(loadInterior);				MovieClip(parent.parent.parent).removeChild(grayOverlay);			} catch(e:ArgumentError) {				// do nothing			}			interiorBtn.addEventListener(MouseEvent.CLICK, interiorBtnClicked, false, 0, true);		}				private function interiorBtnOver(event:MouseEvent):void 		{			//interiorBg			var colorInfo:ColorTransform = interiorBg.transform.colorTransform;			colorInfo.color = 0x666666;			interiorBg.transform.colorTransform = colorInfo;			//textfield			colorInfo = interiorTxt.transform.colorTransform;			colorInfo.color = 0xFFFFFF;			interiorTxt.transform.colorTransform = colorInfo;		}				private function interiorBtnOut(event:MouseEvent):void 		{			//interiorBg			var colorInfo:ColorTransform = interiorBg.transform.colorTransform;			colorInfo.color = 0xE0E0E0;			interiorBg.transform.colorTransform = colorInfo;			//textfield			colorInfo = interiorTxt.transform.colorTransform;			colorInfo.color = 0x141414;			interiorTxt.transform.colorTransform = colorInfo;		}				private function interiorBtnClicked(event:MouseEvent):void 		{			var interiorUrl:String = ""+MovieClip(parent).theModelView+"interior.swf";			var interiorRequest:URLRequest = new URLRequest(interiorUrl);			loadInterior.unload();			loadInterior.load(interiorRequest);			loadInterior.visible = false;			MovieClip(parent.parent.parent).addChild(loadInterior);			Loader(MovieClip(parent.parent.parent).getChildByName("loadInterior")).contentLoaderInfo.addEventListener(Event.COMPLETE, loadInteriorComplete, false, 0, true);			interiorBtn.removeEventListener(MouseEvent.CLICK, interiorBtnClicked, false);		}				private function loadInteriorComplete(event:Event):void 		{			grayOverlay.alpha = 0;						MovieClip(parent.parent.parent).addChildAt(grayOverlay, 2);						/*if(MovieClip(parent)._model == "Z1" || MovieClip(parent)._model == "24Vé" || MovieClip(parent)._model == "22Vé" || MovieClip(parent)._model == "20V" || MovieClip(parent)._model == "RZ4") 			{				setInterior();			}*/			if(MovieClip(parent)._model !== "20i" && MovieClip(parent)._model !== "22i" && MovieClip(parent)._model !== "R20") 			{				setInterior();			}						grayOverlay.addEventListener(Event.ENTER_FRAME, appearGray, false, 0, true);						function appearGray(event:Event):void 			{				grayOverlay.alpha += .07;								if(grayOverlay.alpha >= .5) 				{					loadInterior.alpha = 0;					loadInterior.scaleX = .75;					loadInterior.scaleY = .75;					loadInterior.x = 265;					loadInterior.y = 92;					loadInterior.visible = true;					loadInterior.addEventListener(Event.ENTER_FRAME, moveInterior, false, 0, true);					loadInterior.addEventListener(Event.ENTER_FRAME, scaleInterior, false, 0, true);										function moveInterior(event:Event):void 					{						loadInterior.alpha += .05;						if(loadInterior.alpha >= 1) {							loadInterior.removeEventListener(Event.ENTER_FRAME, moveInterior, false);						}					}										function scaleInterior(event:Event):void 					{						loadInterior.scaleX += .05;						loadInterior.scaleY += .05;						loadInterior.x -= (55/5);						loadInterior.y -= (32/5);						if(loadInterior.scaleX >= 1) {							loadInterior.scaleX = 1;							if(loadInterior.scaleY >= 1) {								loadInterior.scaleY = 1;								if(loadInterior.x <= 210) {									loadInterior.x = 210;									if(loadInterior.y <= 60) {										loadInterior.y = 60;										loadInterior.removeEventListener(Event.ENTER_FRAME, scaleInterior, false);									}								}							}						}					}										grayOverlay.removeEventListener(Event.ENTER_FRAME, appearGray, false);				}			}			MovieClip(loadInterior.content).addChild(closeInteriorBtn);			Loader(MovieClip(parent.parent.parent).getChildByName("loadInterior")).contentLoaderInfo.removeEventListener(Event.COMPLETE, loadInteriorComplete, false);		}				private function setInterior():void 		{			var interiorTimeline:MovieClip = MovieClip(loadInterior.content);			var mainTimeline:MovieClip = MovieClip(parent);						if(mainTimeline._intPkgColor == "platinum") {				interiorTimeline.intPkgMC.intPkgMushMC.visible = false;			} else {				interiorTimeline.intPkgMC.intPkgMushMC.visible = true;			}			if(mainTimeline._accentTextureColor == "none") {				if(mainTimeline._accentTextureName == "nexus") {					interiorTimeline.accentTextureMC.nexusMC.visible = true;					interiorTimeline.accentTextureMC.brushedMC.visible = false;				} else {					interiorTimeline.accentTextureMC.nexusMC.visible = false;					interiorTimeline.accentTextureMC.brushedMC.visible = true;				}			} else {				interiorTimeline.accentTextureMC.nexusMC.visible = false;				interiorTimeline.accentTextureMC.brushedMC.visible = false;			}			mainTimeline.colorSwitch(interiorTimeline.accentVinylMC.accentVinylBgMC, mainTimeline._hex[mainTimeline._accentVinylColor]);			if(mainTimeline._model == "22i" || mainTimeline._model == "20V" || mainTimeline._model == "20i") {				try {					mainTimeline.colorSwitch(interiorTimeline.accentTextureMC.accentTextureBgMC, mainTimeline._hex[mainTimeline._accentTextureColor]);				} catch(e:TypeError) {					//do nothing				}			}			if(mainTimeline._model != "22i" && mainTimeline._model != "20V" && mainTimeline._model != "20i") {				mainTimeline.colorSwitch(interiorTimeline.dashAccentMC.dashAccentBgMC, mainTimeline._hex[mainTimeline._dashAccentColor]);			}		}				private function closeInteriorBtnClicked(event:MouseEvent):void 		{			MovieClip(parent.parent.parent).removeChild(loadInterior);			MovieClip(parent.parent.parent).removeChild(grayOverlay);		}				private function traceDisplayList(container:DisplayObjectContainer, indentString:String = ""):void 		{			var child:DisplayObject;						for(var i:uint=0; i < container.numChildren; i++) 			{				child = container.getChildAt(i);								trace(indentString, child, child.name); 								if(container.getChildAt(i) is DisplayObjectContainer) 				{					traceDisplayList(DisplayObjectContainer(child), indentString + "    ");				}			}		}	}}