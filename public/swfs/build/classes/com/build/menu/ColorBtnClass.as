package com.build.menu {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.CapsStyle;	import flash.display.JointStyle;	import flash.display.LineScaleMode;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Loader;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.AntiAliasType;	public class ColorBtnClass extends Sprite {		private var _content = new Sprite();		//private var _squareSize:uint = 29;		private var _squareSize:uint = 15;		private var _square:Shape = new Shape();		private var _border:Shape = new Shape();		private var _overColorTxtFormat:TextFormat = new TextFormat();		private var _overColorTxt:TextField = new TextField();				public function ColorBtnClass(theColor:int) 		{			init(theColor);		}				private function init(theColor:int):void 		{			_square.graphics.beginFill(theColor, 1);			_square.graphics.drawRect(0, 0, _squareSize, _squareSize);			_square.graphics.endFill();			_border.graphics.lineStyle(1, 0xFFFFFF, 1);			_border.graphics.drawRect(0, 0, _squareSize, _squareSize);						_overColorTxtFormat.color = 0xFFFFFF;			_overColorTxtFormat.size = 10;			//_overColorTxtFormat.font = "Univers 55";			_overColorTxtFormat.font = "Arial";			_overColorTxt.embedFonts = true;			_overColorTxt.autoSize = TextFieldAutoSize.LEFT;			_overColorTxt.antiAliasType = AntiAliasType.ADVANCED;			_overColorTxt.defaultTextFormat = _overColorTxtFormat;			_overColorTxt.selectable = false;			_overColorTxt.mouseEnabled = false;						this.buttonMode = true;						addChild(_content);						_content.addEventListener(Event.ADDED_TO_STAGE, contentAdded, false, 0, true);			addEventListener(MouseEvent.MOUSE_OVER, contentOver, false, 0, true);			addEventListener(MouseEvent.MOUSE_OUT, contentOut, false, 0, true);			addEventListener(MouseEvent.CLICK, contentClick, false, 0, true);		}				private function contentAdded(event:Event):void 		{		  var mainTimeline:Object = Object(parent.parent.parent);			var theDeckAccentBtn:String = new String();			var theSplitDeckAccentBtn:String = new String();		  			_content.addChild(_square);			_content.addChild(_border);						if(this.parent.parent.name == "speakerColorMenu")			{			  _overColorTxt.x = 45 - this.x;			}			else			{			  _overColorTxt.x = 5 - this.x;			}      			_overColorTxt.y = -25 - this.y;						//following line breaks _overColorTxt functionality.\\			//_content.removeEventListener(Event.ADDED_TO_STAGE, contentAdded, false);						switch(mainTimeline._deckAccentColor) 			{				case "c1":					theDeckAccentBtn = "color1BtnMC";					break;				case "c2":					theDeckAccentBtn = "color2BtnMC";					break;				case "c3":					theDeckAccentBtn = "color3BtnMC";					break;				case "c4":					theDeckAccentBtn = "color4BtnMC";					break;				case "c5":					theDeckAccentBtn = "color5BtnMC";					break;				case "c6":					theDeckAccentBtn = "color6BtnMC";					break;				case "c7":					theDeckAccentBtn = "color7BtnMC";					break;				case "c8":					theDeckAccentBtn = "color8BtnMC";					break;				case "c9":					theDeckAccentBtn = "color9BtnMC";					break;				case "c10":					theDeckAccentBtn = "color10BtnMC";					break;				case "c11":					theDeckAccentBtn = "color11BtnMC";					break;				case "c12":					theDeckAccentBtn = "color12BtnMC";					break;				case "c15":					theDeckAccentBtn = "color15BtnMC";					break;				case "c16":					theDeckAccentBtn = "color16BtnMC";					break;				case "c17":					theDeckAccentBtn = "color17BtnMC";					break;			}						try 			{				if(this.parent.parent.name == "deckAccentColorMenu" && this.name == mainTimeline.getChildByName("deckAccentColorMenu").getChildAt(0).getChildByName(theDeckAccentBtn).name) 				{					selectedBorder();				}			} 			catch(error:TypeError) {} 			finally {}						switch(mainTimeline._splitDeckAccentColor) 			{				case "c1":					theSplitDeckAccentBtn = "color1BtnMC";					break;				case "c2":					theSplitDeckAccentBtn = "color2BtnMC";					break;				case "c3":					theSplitDeckAccentBtn = "color3BtnMC";					break;				case "c4":					theSplitDeckAccentBtn = "color4BtnMC";					break;				case "c5":					theSplitDeckAccentBtn = "color5BtnMC";					break;				case "c6":					theSplitDeckAccentBtn = "color6BtnMC";					break;				case "c7":					theSplitDeckAccentBtn = "color7BtnMC";					break;				case "c8":					theSplitDeckAccentBtn = "color8BtnMC";					break;				case "c9":					theSplitDeckAccentBtn = "color9BtnMC";					break;				case "c10":					theSplitDeckAccentBtn = "color10BtnMC";					break;				case "c11":					theSplitDeckAccentBtn = "color11BtnMC";					break;				case "c12":					theSplitDeckAccentBtn = "color12BtnMC";					break;				case "c15":					theSplitDeckAccentBtn = "color15BtnMC";					break;				case "c16":					theSplitDeckAccentBtn = "color16BtnMC";					break;				case "c17":					theSplitDeckAccentBtn = "color17BtnMC";					break;			}						if(this.parent.parent.name == "splitDeckAccentColorMenu" && this.name == mainTimeline.getChildByName("splitDeckAccentColorMenu").getChildAt(0).getChildByName(theSplitDeckAccentBtn).name) 			{				selectedBorder();			}						function selectedBorder():void 			{				resetBtns();								_content.removeChild(_border);								_border.graphics.clear();				_border.graphics.lineStyle(2, 0x999999, 1, true, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 1.414);				_border.graphics.drawRect(0, 0, _squareSize, _squareSize);								_content.addChild(_border);			}		}				private function contentOver(event:MouseEvent):void 		{			var itemOver:Object = event.target.parent;						itemOver._content.removeChild(itemOver._border);						itemOver._border.graphics.clear();			itemOver._border.graphics.lineStyle(2, 0x999999, 1, true, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 1.414);			itemOver._border.graphics.drawRect(0, 0, _squareSize, _squareSize);						itemOver._content.addChild(itemOver._border);						overColorName(itemOver.name);						addChild(_overColorTxt);		}				private function contentOut(event:MouseEvent):void 		{			var itemOut:Object = event.target.parent;						itemOut._content.removeChild(itemOut._border);						itemOut._border.graphics.clear();			itemOut._border.graphics.lineStyle(1, 0xFFFFFF, 1);			itemOut._border.graphics.drawRect(0, 0, _squareSize, _squareSize);						itemOut._content.addChild(itemOut._border);						removeChild(_overColorTxt);		}				private function contentClick(event:MouseEvent):void 		{			var itemClicked:Object = event.currentTarget;			var mainTimeline:Object = Object(parent.parent.parent);			var deckTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_deck").getChildAt(0).getChildAt(0).getChildAt(0);						if(Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_deckAccent"))) 			{				var deckAccentTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_deckAccent").getChildAt(0).getChildAt(0).getChildAt(0);			}						if(Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_splitDeckAccent"))) 			{				var splitDeckAccentTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_splitDeckAccent").getChildAt(0).getChildAt(0).getChildAt(0);			}						var hullTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_hull").getChildAt(0).getChildAt(0).getChildAt(0);			var mainPanelTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_mainPanel").getChildAt(0).getChildAt(0).getChildAt(0);						if(Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_mainPanelAccent"))) 			{				var mainPanelAccentTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_mainPanelAccent").getChildAt(0).getChildAt(0).getChildAt(0);			}			if(Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_secondPanel"))) 			{				var secondPanelTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_secondPanel").getChildAt(0).getChildAt(0).getChildAt(0);			}						if(Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_secondPanelAccent"))) 			{				var secondPanelAccentTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_secondPanelAccent").getChildAt(0).getChildAt(0).getChildAt(0);			}						if(Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_transomAccent"))) 			{				var transomAccentTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_transomAccent").getChildAt(0).getChildAt(0).getChildAt(0);			}						var swimPlatformTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_swimPlatform").getChildAt(0).getChildAt(0).getChildAt(0);						if(mainTimeline._model !== "20i" && Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_tower")) || mainTimeline._model !== "20V" && Boolean(mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_tower")))			{			  var towerTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildAt(1).getChildByName("_tower").getChildAt(0).getChildAt(0).getChildAt(0);			}						var accentVinylTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildByName("_interiorSections").getChildByName("_accentVinyl").getChildAt(0).getChildAt(0).getChildAt(0);						if(mainTimeline._model == "22i" || mainTimeline._model == "20V" || mainTimeline._model == "20i") 			{				var accentTextureTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildByName("_interiorSections").getChildByName("_accentTexture").getChildAt(0).getChildAt(0).getChildAt(0);			}						if(mainTimeline._model != "22i" && mainTimeline._model != "20V" && mainTimeline._model != "20i") 			{				var dashAccentTextField:TextField = mainTimeline.getChildByName("sectionMenu").getChildByName("_interiorSections").getChildByName("_dashAccent").getChildAt(0).getChildAt(0).getChildAt(0);			}						var theDeckBtn:String = new String();						resetBtns();						itemClicked.removeEventListener(MouseEvent.MOUSE_OVER, contentOver, false);			itemClicked.removeEventListener(MouseEvent.MOUSE_OUT, contentOut, false);			itemClicked.removeEventListener(MouseEvent.CLICK, contentClick, false);						itemClicked._content.removeChild(itemClicked._border);						itemClicked._border.graphics.clear();			itemClicked._border.graphics.lineStyle(2, 0x999999, 1, true, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 1.414);			itemClicked._border.graphics.drawRect(0, 0, _squareSize, _squareSize);						itemClicked._content.addChild(itemClicked._border);						switch(mainTimeline._deckColor) 			{				case "c1":					theDeckBtn = "color1BtnMC";					break;				case "c2":					theDeckBtn = "color2BtnMC";					break;				case "c3":					theDeckBtn = "color3BtnMC";					break;				case "c4":					theDeckBtn = "color4BtnMC";					break;				case "c5":					theDeckBtn = "color5BtnMC";					break;				case "c6":					theDeckBtn = "color6BtnMC";					break;				case "c7":					theDeckBtn = "color7BtnMC";					break;				case "c8":					theDeckBtn = "color8BtnMC";					break;				case "c9":					theDeckBtn = "color9BtnMC";					break;				case "c10":					theDeckBtn = "color10BtnMC";					break;				case "c11":					theDeckBtn = "color11BtnMC";					break;				case "c12":					theDeckBtn = "color12BtnMC";					break;				case "c15":					theDeckBtn = "color15BtnMC";					break;				case "c16":					theDeckBtn = "color16BtnMC";					break;				case "c17":					theDeckBtn = "color17BtnMC";					break;			}						switch(itemClicked.parent.parent.name) 			{				case "deckColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.deckMC.deckBgMC, "_deckColor");					deckTextField.replaceText(6, 50, mainTimeline._colorNames[mainTimeline._deckColor].toString());					break;				case "deckAccentColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.deckMC.deckAccentBgMC, "_deckAccentColor");					deckAccentTextField.replaceText(13, 50, mainTimeline._colorNames[mainTimeline._deckAccentColor].toString());					break;				case "splitDeckAccentColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.deckMC.splitDeckAccentMC, "_splitDeckAccentColor");					splitDeckAccentTextField.replaceText(19, 50, mainTimeline._colorNames[mainTimeline._splitDeckAccentColor].toString());					break;				case "hullColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.hullMC.hullBgMC, "_hullColor");					hullTextField.replaceText(6, 50, mainTimeline._colorNames[mainTimeline._hullColor].toString());					break;				case "mainPanelColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.mainPanelMC.mainPanelBgMC, "_mainPanelColor");					mainPanelTextField.replaceText(12, 50, mainTimeline._colorNames[mainTimeline._mainPanelColor].toString());					break;				case "mainPanelAccentColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.mainPanelMC.mainPanelAccentMC, "_mainPanelAccentColor");					mainPanelAccentTextField.replaceText(19, 50, mainTimeline._colorNames[mainTimeline._mainPanelAccentColor].toString());					break;				case "secondPanelColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.secondPanelMC.secondPanelBgMC, "_secondPanelColor");					secondPanelTextField.replaceText(14, 50, mainTimeline._colorNames[mainTimeline._secondPanelColor].toString());					break;				case "secondPanelAccentColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.secondPanelMC.secondPanelAccentMC, "_secondPanelAccentColor");					secondPanelAccentTextField.replaceText(21, 50, mainTimeline._colorNames[mainTimeline._secondPanelAccentColor].toString());					break;				case "transomAccentColorMenu":					try {					  mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.transomAccentMC, "_transomAccentColor");					} 					catch(e:TypeError) {}										transomAccentTextField.replaceText(16, 50, mainTimeline._colorNames[mainTimeline._transomAccentColor].toString());					break;				case "swimPlatformColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.swimPlatformMC.swimPlatformBgMC, "_swimPlatformColor");					swimPlatformTextField.replaceText(15, 50, mainTimeline._colorNames[mainTimeline._swimPlatformColor].toString());					break;				case "towerColorMenu":				  mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.towerMC.towerBodyMC, "_towerColor");				  towerTextField.replaceText(7, 50, mainTimeline._colorNames[mainTimeline._towerColor].toString());				  break;				case "speakerColorMenu":				  mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.towerMC.speakersColorMC, "_speakersColor");				  break;				case "accentVinylColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.accentVinylMC.accentVinylBgMC, "_accentVinylColor");										try 					{						mainTimeline.colorSwitchStatement(itemClicked.name, MovieClip(Loader(parent.parent.parent.parent.parent.getChildByName("loadInterior")).content).accentVinylMC.accentVinylBgMC, "_accentVinylColor");					} 					catch(e:TypeError) {}										accentVinylTextField.replaceText(14, 50, mainTimeline._colorNames[mainTimeline._accentVinylColor].toString());					break;				case "accentTextureColorMenu":					try 					{						mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.accentTextureMC.accentTextureBgMC, "_accentTextureColor");					} 					catch(e:TypeError) {}										try 					{						mainTimeline.colorSwitchStatement(itemClicked.name, MovieClip(Loader(parent.parent.parent.parent.parent.getChildByName("loadInterior")).content).accentTextureMC.accentTextureBgMC, "_accentTextureColor");					} 					catch(e:TypeError) {}										try 					{						mainTimeline._modelViewName.content.accentTextureMC.brushedMC.visible = false;						mainTimeline._modelViewName.content.accentTextureMC.nexusMC.visible = false;					} 					catch(e:TypeError) {}										try 					{						MovieClip(Loader(parent.parent.parent.parent.parent.getChildByName("loadInterior")).content).accentTextureMC.brushedMC.visible = false;						MovieClip(Loader(parent.parent.parent.parent.parent.getChildByName("loadInterior")).content).accentTextureMC.nexusMC.visible = false;					} 					catch(e:TypeError) {}										accentTextureTextField.replaceText(14, 50, mainTimeline._colorNames[mainTimeline._accentTextureColor].toString());					break;				case "dashAccentColorMenu":					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.dashAccentMC.dashAccentBgMC, "_dashAccentColor");										try 					{						mainTimeline.colorSwitchStatement(itemClicked.name, MovieClip(Loader(parent.parent.parent.parent.parent.getChildByName("loadInterior")).content).dashAccentMC.dashAccentBgMC, "_dashAccentColor");					} 					catch(e:TypeError) {}										dashAccentTextField.replaceText(13, 50, mainTimeline._colorNames[mainTimeline._dashAccentColor].toString());					break;				default:					mainTimeline.colorSwitchStatement(itemClicked.name, mainTimeline._modelViewName.content.deckMC.deckBgMC, "_deckColor");					deckTextField.replaceText(6, 50, mainTimeline._colorNames[mainTimeline._deckColor].toString());			}						removeChild(_overColorTxt);		}				private function overColorName(theItem:Object):void 		{			var mainTimeline:Object = Object(parent.parent.parent);						switch(theItem) 			{				case "color1BtnMC":					//trace(this.parent.parent.name);										_overColorTxt.text = mainTimeline._colorNames["c1"];					break;				case "color2BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c2"];					break;				case "color3BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c3"];					break;				case "color4BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c4"];					break;				case "color5BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c5"];					break;				case "color6BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c6"];					break;				case "color7BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c7"];					break;				case "color8BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c8"];					break;				case "color9BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c9"];					break;				case "color10BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c10"];					break;				case "color11BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c11"];					break;				case "color12BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c12"];					break;				case "color15BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c15"];					break;				case "color16BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c16"];					break;				case "color17BtnMC":					_overColorTxt.text = mainTimeline._colorNames["c17"];					break;				default:					_overColorTxt.text = mainTimeline._colorNames["c1"];					break;			}		}				public function resetBtns():void 		{		  var limit:uint;		  		  if(this.parent.parent.name == "speakerColorMenu")		  {		    limit = Sprite(this.parent.parent.getChildAt(0)).numChildren - 1;		  } 		  else		  {		    limit = Sprite(this.parent.parent.getChildAt(0)).numChildren;		  }		  			for(var i:uint = 0; i < limit; i++) 			{				var theItem:Sprite = Sprite(this.parent.parent.getChildAt(0));				var theBorder:Object = Object(this.parent.parent.getChildAt(0));								theItem.getChildAt(i).addEventListener(MouseEvent.MOUSE_OVER, contentOver, false, 0, true);				theItem.getChildAt(i).addEventListener(MouseEvent.MOUSE_OUT, contentOut, false, 0, true);				theItem.getChildAt(i).addEventListener(MouseEvent.CLICK, contentClick, false, 0, true);								theBorder.getChildAt(i)._content.removeChild(theBorder.getChildAt(i)._border);								theBorder.getChildAt(i)._border.graphics.clear();				theBorder.getChildAt(i)._border.graphics.lineStyle(1, 0xFFFFFF, 1);				theBorder.getChildAt(i)._border.graphics.drawRect(0, 0, _squareSize, _squareSize);								theBorder.getChildAt(i)._content.addChild(theBorder.getChildAt(i)._border);			}		}	}}